from typing import Any, Callable, ClassVar, List, Optional, Tuple, Union

from typing import overload
import flags
import numpy
import pydrake.autodiffutils
import pydrake.common._module_py
import pydrake.common.cpp_template
import pydrake.common.value
import pydrake.symbolic
BasicVector_: pydrake.common.cpp_template.TemplateClass
Context_: pydrake.common.cpp_template.TemplateClass
ContinuousState_: pydrake.common.cpp_template.TemplateClass
DiagramBuilder_: pydrake.common.cpp_template.TemplateClass
Diagram_: pydrake.common.cpp_template.TemplateClass
DiscreteUpdateEvent_: pydrake.common.cpp_template.TemplateClass
DiscreteValues_: pydrake.common.cpp_template.TemplateClass
Event_: pydrake.common.cpp_template.TemplateClass
InputPort_: pydrake.common.cpp_template.TemplateClass
LeafContext_: pydrake.common.cpp_template.TemplateClass
LeafOutputPort_: pydrake.common.cpp_template.TemplateClass
LeafSystem_: pydrake.common.cpp_template.TemplateClass
OutputPort_: pydrake.common.cpp_template.TemplateClass
Parameters_: pydrake.common.cpp_template.TemplateClass
PublishEvent_: pydrake.common.cpp_template.TemplateClass
State_: pydrake.common.cpp_template.TemplateClass
Subvector_: pydrake.common.cpp_template.TemplateClass
Supervector_: pydrake.common.cpp_template.TemplateClass
SystemOutput_: pydrake.common.cpp_template.TemplateClass
SystemVisitor_: pydrake.common.cpp_template.TemplateClass
System_: pydrake.common.cpp_template.TemplateClass
UnrestrictedUpdateEvent_: pydrake.common.cpp_template.TemplateClass
VectorBase_: pydrake.common.cpp_template.TemplateClass
VectorSystem_: pydrake.common.cpp_template.TemplateClass
WitnessFunction_: pydrake.common.cpp_template.TemplateClass
kUseDefaultName: UseDefaultName

class AbstractParameterIndex:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: int) -> None: ...
    def is_valid(self) -> bool: ...
    @overload
    def __eq__(self, arg0: AbstractParameterIndex) -> bool: ...
    @overload
    def __eq__(self, arg0: int) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __lt__(self, arg0: AbstractParameterIndex) -> bool: ...

class AbstractStateIndex:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: int) -> None: ...
    def is_valid(self) -> bool: ...
    @overload
    def __eq__(self, arg0: AbstractStateIndex) -> bool: ...
    @overload
    def __eq__(self, arg0: int) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __lt__(self, arg0: AbstractStateIndex) -> bool: ...

class AbstractValues:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: List[pydrake.common.value.AbstractValue]) -> None: ...
    def Clone(self) -> AbstractValues: ...
    def SetFrom(self, arg0: AbstractValues) -> None: ...
    def get_mutable_value(self, index: int) -> pydrake.common.value.AbstractValue: ...
    def get_value(self, index: int) -> pydrake.common.value.AbstractValue: ...
    def size(self) -> int: ...
    def __copy__(self) -> AbstractValues: ...
    def __deepcopy__(self, arg0: dict) -> AbstractValues: ...

class BasicVector(VectorBase_[float]):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, data: numpy.ndarray[numpy.float64[m,1]]) -> None: ...
    @overload
    def __init__(self, size: int) -> None: ...
    def Clone(self) -> BasicVector_[float]: ...
    def _get_value_copy(self) -> numpy.ndarray[numpy.float64[m,1]]: ...
    def get_mutable_value(self) -> numpy.ndarray[numpy.float64[m,1],flags.writeable]: ...
    def get_value(self) -> numpy.ndarray[numpy.float64[m,1]]: ...
    def set_value(self, arg0: numpy.ndarray[numpy.float64[m,1]]) -> None: ...
    def value(self) -> numpy.ndarray[numpy.float64[m,1]]: ...
    def __copy__(self) -> BasicVector_[float]: ...
    def __deepcopy__(self, arg0: dict) -> BasicVector_[float]: ...

class BasicVector_[AutoDiffXd](VectorBase_[AutoDiffXd]):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, data: numpy.ndarray[object[m,1]]) -> None: ...
    @overload
    def __init__(self, size: int) -> None: ...
    def Clone(self) -> BasicVector_[AutoDiffXd]: ...
    def _get_value_copy(self) -> numpy.ndarray[object[m,1]]: ...
    def get_mutable_value(self) -> numpy.ndarray[object[m,1],flags.writeable]: ...
    def get_value(self) -> numpy.ndarray[object[m,1]]: ...
    def set_value(self, arg0: numpy.ndarray[object[m,1]]) -> None: ...
    def value(self) -> numpy.ndarray[object[m,1]]: ...
    def __copy__(self) -> BasicVector_[AutoDiffXd]: ...
    def __deepcopy__(self, arg0: dict) -> BasicVector_[AutoDiffXd]: ...

class BasicVector_[Expression](VectorBase_[Expression]):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, data: numpy.ndarray[object[m,1]]) -> None: ...
    @overload
    def __init__(self, size: int) -> None: ...
    def Clone(self) -> BasicVector_[Expression]: ...
    def _get_value_copy(self) -> numpy.ndarray[object[m,1]]: ...
    def get_mutable_value(self) -> numpy.ndarray[object[m,1],flags.writeable]: ...
    def get_value(self) -> numpy.ndarray[object[m,1]]: ...
    def set_value(self, arg0: numpy.ndarray[object[m,1]]) -> None: ...
    def value(self) -> numpy.ndarray[object[m,1]]: ...
    def __copy__(self) -> BasicVector_[Expression]: ...
    def __deepcopy__(self, arg0: dict) -> BasicVector_[Expression]: ...

class BasicVector_[float](VectorBase_[float]):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, data: numpy.ndarray[numpy.float64[m,1]]) -> None: ...
    @overload
    def __init__(self, size: int) -> None: ...
    def Clone(self) -> BasicVector_[float]: ...
    def _get_value_copy(self) -> numpy.ndarray[numpy.float64[m,1]]: ...
    def get_mutable_value(self) -> numpy.ndarray[numpy.float64[m,1],flags.writeable]: ...
    def get_value(self) -> numpy.ndarray[numpy.float64[m,1]]: ...
    def set_value(self, arg0: numpy.ndarray[numpy.float64[m,1]]) -> None: ...
    def value(self) -> numpy.ndarray[numpy.float64[m,1]]: ...
    def __copy__(self) -> BasicVector_[float]: ...
    def __deepcopy__(self, arg0: dict) -> BasicVector_[float]: ...

class CacheEntry:
    def __init__(self, *args, **kwargs) -> None: ...
    def Eval(self, context: ContextBase) -> object: ...
    def EvalAbstract(self, context: ContextBase) -> pydrake.common.value.AbstractValue: ...
    def cache_index(self) -> CacheIndex: ...
    def get_cache_entry_value(self, context: ContextBase) -> CacheEntryValue: ...
    def get_mutable_cache_entry_value(self, context: ContextBase) -> CacheEntryValue: ...
    def prerequisites(self) -> Set[DependencyTicket]: ...
    def ticket(self) -> DependencyTicket: ...

class CacheEntryValue:
    def __init__(self, *args, **kwargs) -> None: ...
    def GetMutableValueOrThrow(self) -> object: ...
    def GetValueOrThrow(self) -> object: ...

class CacheIndex:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: int) -> None: ...
    def is_valid(self) -> bool: ...
    @overload
    def __eq__(self, arg0: CacheIndex) -> bool: ...
    @overload
    def __eq__(self, arg0: int) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __lt__(self, arg0: CacheIndex) -> bool: ...

class Context(ContextBase):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def Clone(self) -> Context_[float]: ...
    def SetAbstractState(self, index: int, value: object) -> None: ...
    def SetAccuracy(self, accuracy: Optional[float]) -> None: ...
    def SetContinuousState(self, arg0: numpy.ndarray[numpy.float64[m,1]]) -> None: ...
    @overload
    def SetDiscreteState(self, xd: numpy.ndarray[numpy.float64[m,1]]) -> None: ...
    @overload
    def SetDiscreteState(self, group_index: int, xd: numpy.ndarray[numpy.float64[m,1]]) -> None: ...
    @overload
    def SetDiscreteState(self, xd) -> None: ...
    @overload
    def SetStateAndParametersFrom(self, source: Context_[float]) -> None: ...
    @overload
    def SetStateAndParametersFrom(self, source) -> None: ...
    def SetTime(self, time_sec: float) -> None: ...
    def SetTimeAndContinuousState(self, arg0: float, arg1: numpy.ndarray[numpy.float64[m,1]]) -> None: ...
    @overload
    def SetTimeStateAndParametersFrom(self, source: Context_[float]) -> None: ...
    @overload
    def SetTimeStateAndParametersFrom(self, source) -> None: ...
    def get_abstract_parameter(self, index: int) -> pydrake.common.value.AbstractValue: ...
    @overload
    def get_abstract_state(self) -> AbstractValues: ...
    @overload
    def get_abstract_state(self, index: int) -> pydrake.common.value.AbstractValue: ...
    def get_accuracy(self) -> Optional[float]: ...
    def get_continuous_state(self, *args, **kwargs) -> Any: ...
    def get_continuous_state_vector(self) -> VectorBase_[float]: ...
    def get_discrete_state(self, arg0: int) -> BasicVector_[float]: ...
    def get_discrete_state_vector(self) -> BasicVector_[float]: ...
    def get_mutable_abstract_parameter(self, index: int) -> pydrake.common.value.AbstractValue: ...
    @overload
    def get_mutable_abstract_state(self) -> AbstractValues: ...
    @overload
    def get_mutable_abstract_state(self, index: int) -> pydrake.common.value.AbstractValue: ...
    def get_mutable_continuous_state(self, *args, **kwargs) -> Any: ...
    def get_mutable_continuous_state_vector(self) -> VectorBase_[float]: ...
    def get_mutable_discrete_state(self, arg0: int) -> BasicVector_[float]: ...
    def get_mutable_discrete_state_vector(self) -> BasicVector_[float]: ...
    def get_mutable_numeric_parameter(self, index: int) -> BasicVector_[float]: ...
    def get_mutable_parameters(self, *args, **kwargs) -> Any: ...
    def get_mutable_state(self, *args, **kwargs) -> Any: ...
    def get_numeric_parameter(self, index: int) -> BasicVector_[float]: ...
    def get_parameters(self, *args, **kwargs) -> Any: ...
    def get_state(self, *args, **kwargs) -> Any: ...
    def get_time(self) -> float: ...
    def has_only_continuous_state(self) -> bool: ...
    def has_only_discrete_state(self) -> bool: ...
    def is_stateless(self) -> bool: ...
    def num_abstract_parameters(self) -> int: ...
    def num_abstract_states(self) -> int: ...
    def num_continuous_states(self) -> int: ...
    def num_discrete_state_groups(self) -> int: ...
    def num_numeric_parameter_groups(self) -> int: ...
    def num_total_states(self) -> int: ...
    def __copy__(self) -> Context_[float]: ...
    def __deepcopy__(self, arg0: dict) -> Context_[float]: ...

class ContextBase:
    def __init__(self, *args, **kwargs) -> None: ...
    def DisableCaching(self) -> None: ...
    def EnableCaching(self) -> None: ...
    def FreezeCache(self) -> None: ...
    def SetAllCacheEntriesOutOfDate(self) -> None: ...
    def UnfreezeCache(self) -> None: ...
    def is_cache_frozen(self) -> bool: ...
    def num_input_ports(self) -> int: ...
    def num_output_ports(self) -> int: ...

class Context_[AutoDiffXd](ContextBase):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def Clone(self) -> Context_[AutoDiffXd]: ...
    def SetAbstractState(self, index: int, value: object) -> None: ...
    def SetAccuracy(self, accuracy: Optional[float]) -> None: ...
    def SetContinuousState(self, arg0: numpy.ndarray[object[m,1]]) -> None: ...
    @overload
    def SetDiscreteState(self, xd: numpy.ndarray[object[m,1]]) -> None: ...
    @overload
    def SetDiscreteState(self, group_index: int, xd: numpy.ndarray[object[m,1]]) -> None: ...
    @overload
    def SetStateAndParametersFrom(self, source: Context_[float]) -> None: ...
    @overload
    def SetStateAndParametersFrom(self, source: Context_[AutoDiffXd]) -> None: ...
    @overload
    def SetStateAndParametersFrom(self, source) -> None: ...
    def SetTime(self, time_sec: pydrake.autodiffutils.AutoDiffXd) -> None: ...
    def SetTimeAndContinuousState(self, arg0: pydrake.autodiffutils.AutoDiffXd, arg1: numpy.ndarray[object[m,1]]) -> None: ...
    @overload
    def SetTimeStateAndParametersFrom(self, source: Context_[float]) -> None: ...
    @overload
    def SetTimeStateAndParametersFrom(self, source: Context_[AutoDiffXd]) -> None: ...
    @overload
    def SetTimeStateAndParametersFrom(self, source) -> None: ...
    def get_abstract_parameter(self, index: int) -> pydrake.common.value.AbstractValue: ...
    @overload
    def get_abstract_state(self) -> AbstractValues: ...
    @overload
    def get_abstract_state(self, index: int) -> pydrake.common.value.AbstractValue: ...
    def get_accuracy(self) -> Optional[float]: ...
    def get_continuous_state(self, *args, **kwargs) -> Any: ...
    def get_continuous_state_vector(self) -> VectorBase_[AutoDiffXd]: ...
    def get_discrete_state(self, arg0: int) -> BasicVector_[AutoDiffXd]: ...
    def get_discrete_state_vector(self) -> BasicVector_[AutoDiffXd]: ...
    def get_mutable_abstract_parameter(self, index: int) -> pydrake.common.value.AbstractValue: ...
    @overload
    def get_mutable_abstract_state(self) -> AbstractValues: ...
    @overload
    def get_mutable_abstract_state(self, index: int) -> pydrake.common.value.AbstractValue: ...
    def get_mutable_continuous_state(self, *args, **kwargs) -> Any: ...
    def get_mutable_continuous_state_vector(self) -> VectorBase_[AutoDiffXd]: ...
    def get_mutable_discrete_state(self, arg0: int) -> BasicVector_[AutoDiffXd]: ...
    def get_mutable_discrete_state_vector(self) -> BasicVector_[AutoDiffXd]: ...
    def get_mutable_numeric_parameter(self, index: int) -> BasicVector_[AutoDiffXd]: ...
    def get_mutable_parameters(self, *args, **kwargs) -> Any: ...
    def get_mutable_state(self, *args, **kwargs) -> Any: ...
    def get_numeric_parameter(self, index: int) -> BasicVector_[AutoDiffXd]: ...
    def get_parameters(self, *args, **kwargs) -> Any: ...
    def get_state(self, *args, **kwargs) -> Any: ...
    def get_time(self) -> pydrake.autodiffutils.AutoDiffXd: ...
    def has_only_continuous_state(self) -> bool: ...
    def has_only_discrete_state(self) -> bool: ...
    def is_stateless(self) -> bool: ...
    def num_abstract_parameters(self) -> int: ...
    def num_abstract_states(self) -> int: ...
    def num_continuous_states(self) -> int: ...
    def num_discrete_state_groups(self) -> int: ...
    def num_numeric_parameter_groups(self) -> int: ...
    def num_total_states(self) -> int: ...
    def __copy__(self) -> Context_[AutoDiffXd]: ...
    def __deepcopy__(self, arg0: dict) -> Context_[AutoDiffXd]: ...

class Context_[Expression](ContextBase):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def Clone(self) -> Context_[Expression]: ...
    def SetAbstractState(self, index: int, value: object) -> None: ...
    def SetAccuracy(self, accuracy: Optional[float]) -> None: ...
    def SetContinuousState(self, arg0: numpy.ndarray[object[m,1]]) -> None: ...
    @overload
    def SetDiscreteState(self, xd: numpy.ndarray[object[m,1]]) -> None: ...
    @overload
    def SetDiscreteState(self, group_index: int, xd: numpy.ndarray[object[m,1]]) -> None: ...
    @overload
    def SetDiscreteState(self, xd) -> None: ...
    @overload
    def SetStateAndParametersFrom(self, source: Context_[float]) -> None: ...
    @overload
    def SetStateAndParametersFrom(self, source: Context_[AutoDiffXd]) -> None: ...
    @overload
    def SetStateAndParametersFrom(self, source: Context_[Expression]) -> None: ...
    def SetTime(self, time_sec: pydrake.symbolic.Expression) -> None: ...
    def SetTimeAndContinuousState(self, arg0: pydrake.symbolic.Expression, arg1: numpy.ndarray[object[m,1]]) -> None: ...
    @overload
    def SetTimeStateAndParametersFrom(self, source: Context_[float]) -> None: ...
    @overload
    def SetTimeStateAndParametersFrom(self, source: Context_[AutoDiffXd]) -> None: ...
    @overload
    def SetTimeStateAndParametersFrom(self, source: Context_[Expression]) -> None: ...
    def get_abstract_parameter(self, index: int) -> pydrake.common.value.AbstractValue: ...
    @overload
    def get_abstract_state(self) -> AbstractValues: ...
    @overload
    def get_abstract_state(self, index: int) -> pydrake.common.value.AbstractValue: ...
    def get_accuracy(self) -> Optional[float]: ...
    def get_continuous_state(self, *args, **kwargs) -> Any: ...
    def get_continuous_state_vector(self) -> VectorBase_[Expression]: ...
    def get_discrete_state(self, arg0: int) -> BasicVector_[Expression]: ...
    def get_discrete_state_vector(self) -> BasicVector_[Expression]: ...
    def get_mutable_abstract_parameter(self, index: int) -> pydrake.common.value.AbstractValue: ...
    @overload
    def get_mutable_abstract_state(self) -> AbstractValues: ...
    @overload
    def get_mutable_abstract_state(self, index: int) -> pydrake.common.value.AbstractValue: ...
    def get_mutable_continuous_state(self, *args, **kwargs) -> Any: ...
    def get_mutable_continuous_state_vector(self) -> VectorBase_[Expression]: ...
    def get_mutable_discrete_state(self, arg0: int) -> BasicVector_[Expression]: ...
    def get_mutable_discrete_state_vector(self) -> BasicVector_[Expression]: ...
    def get_mutable_numeric_parameter(self, index: int) -> BasicVector_[Expression]: ...
    def get_mutable_parameters(self, *args, **kwargs) -> Any: ...
    def get_mutable_state(self, *args, **kwargs) -> Any: ...
    def get_numeric_parameter(self, index: int) -> BasicVector_[Expression]: ...
    def get_parameters(self, *args, **kwargs) -> Any: ...
    def get_state(self, *args, **kwargs) -> Any: ...
    def get_time(self) -> pydrake.symbolic.Expression: ...
    def has_only_continuous_state(self) -> bool: ...
    def has_only_discrete_state(self) -> bool: ...
    def is_stateless(self) -> bool: ...
    def num_abstract_parameters(self) -> int: ...
    def num_abstract_states(self) -> int: ...
    def num_continuous_states(self) -> int: ...
    def num_discrete_state_groups(self) -> int: ...
    def num_numeric_parameter_groups(self) -> int: ...
    def num_total_states(self) -> int: ...
    def __copy__(self) -> Context_[Expression]: ...
    def __deepcopy__(self, arg0: dict) -> Context_[Expression]: ...

class Context_[float](ContextBase):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def Clone(self) -> Context_[float]: ...
    def SetAbstractState(self, index: int, value: object) -> None: ...
    def SetAccuracy(self, accuracy: Optional[float]) -> None: ...
    def SetContinuousState(self, arg0: numpy.ndarray[numpy.float64[m,1]]) -> None: ...
    @overload
    def SetDiscreteState(self, xd: numpy.ndarray[numpy.float64[m,1]]) -> None: ...
    @overload
    def SetDiscreteState(self, group_index: int, xd: numpy.ndarray[numpy.float64[m,1]]) -> None: ...
    @overload
    def SetDiscreteState(self, xd) -> None: ...
    @overload
    def SetStateAndParametersFrom(self, source: Context_[float]) -> None: ...
    @overload
    def SetStateAndParametersFrom(self, source) -> None: ...
    def SetTime(self, time_sec: float) -> None: ...
    def SetTimeAndContinuousState(self, arg0: float, arg1: numpy.ndarray[numpy.float64[m,1]]) -> None: ...
    @overload
    def SetTimeStateAndParametersFrom(self, source: Context_[float]) -> None: ...
    @overload
    def SetTimeStateAndParametersFrom(self, source) -> None: ...
    def get_abstract_parameter(self, index: int) -> pydrake.common.value.AbstractValue: ...
    @overload
    def get_abstract_state(self) -> AbstractValues: ...
    @overload
    def get_abstract_state(self, index: int) -> pydrake.common.value.AbstractValue: ...
    def get_accuracy(self) -> Optional[float]: ...
    def get_continuous_state(self, *args, **kwargs) -> Any: ...
    def get_continuous_state_vector(self) -> VectorBase_[float]: ...
    def get_discrete_state(self, arg0: int) -> BasicVector_[float]: ...
    def get_discrete_state_vector(self) -> BasicVector_[float]: ...
    def get_mutable_abstract_parameter(self, index: int) -> pydrake.common.value.AbstractValue: ...
    @overload
    def get_mutable_abstract_state(self) -> AbstractValues: ...
    @overload
    def get_mutable_abstract_state(self, index: int) -> pydrake.common.value.AbstractValue: ...
    def get_mutable_continuous_state(self, *args, **kwargs) -> Any: ...
    def get_mutable_continuous_state_vector(self) -> VectorBase_[float]: ...
    def get_mutable_discrete_state(self, arg0: int) -> BasicVector_[float]: ...
    def get_mutable_discrete_state_vector(self) -> BasicVector_[float]: ...
    def get_mutable_numeric_parameter(self, index: int) -> BasicVector_[float]: ...
    def get_mutable_parameters(self, *args, **kwargs) -> Any: ...
    def get_mutable_state(self, *args, **kwargs) -> Any: ...
    def get_numeric_parameter(self, index: int) -> BasicVector_[float]: ...
    def get_parameters(self, *args, **kwargs) -> Any: ...
    def get_state(self, *args, **kwargs) -> Any: ...
    def get_time(self) -> float: ...
    def has_only_continuous_state(self) -> bool: ...
    def has_only_discrete_state(self) -> bool: ...
    def is_stateless(self) -> bool: ...
    def num_abstract_parameters(self) -> int: ...
    def num_abstract_states(self) -> int: ...
    def num_continuous_states(self) -> int: ...
    def num_discrete_state_groups(self) -> int: ...
    def num_numeric_parameter_groups(self) -> int: ...
    def num_total_states(self) -> int: ...
    def __copy__(self) -> Context_[float]: ...
    def __deepcopy__(self, arg0: dict) -> Context_[float]: ...

class ContinuousState:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, state: VectorBase_[float]) -> None: ...
    @overload
    def __init__(self, state: VectorBase_[float], num_q: int, num_v: int, num_z: int) -> None: ...
    @overload
    def __init__(self) -> None: ...
    def Clone(self) -> ContinuousState_[float]: ...
    def CopyToVector(self) -> numpy.ndarray[numpy.float64[m,1]]: ...
    def SetFrom(self, arg0: ContinuousState_[float]) -> None: ...
    def SetFromVector(self, value: numpy.ndarray[numpy.float64[m,1]]) -> None: ...
    def get_generalized_position(self) -> VectorBase_[float]: ...
    def get_generalized_velocity(self) -> VectorBase_[float]: ...
    def get_misc_continuous_state(self) -> VectorBase_[float]: ...
    def get_mutable_generalized_position(self) -> VectorBase_[float]: ...
    def get_mutable_generalized_velocity(self) -> VectorBase_[float]: ...
    def get_mutable_misc_continuous_state(self) -> VectorBase_[float]: ...
    def get_mutable_vector(self) -> VectorBase_[float]: ...
    def get_vector(self) -> VectorBase_[float]: ...
    def num_q(self) -> int: ...
    def num_v(self) -> int: ...
    def num_z(self) -> int: ...
    def size(self) -> int: ...
    def __copy__(self) -> ContinuousState_[float]: ...
    def __deepcopy__(self, arg0: dict) -> ContinuousState_[float]: ...
    def __getitem__(self, arg0: int) -> float: ...
    def __setitem__(self, arg0: int, arg1: float) -> None: ...

class ContinuousStateIndex:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: int) -> None: ...
    def is_valid(self) -> bool: ...
    @overload
    def __eq__(self, arg0: ContinuousStateIndex) -> bool: ...
    @overload
    def __eq__(self, arg0: int) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __lt__(self, arg0: ContinuousStateIndex) -> bool: ...

class ContinuousState_[AutoDiffXd]:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, state: VectorBase_[AutoDiffXd]) -> None: ...
    @overload
    def __init__(self, state: VectorBase_[AutoDiffXd], num_q: int, num_v: int, num_z: int) -> None: ...
    @overload
    def __init__(self) -> None: ...
    def Clone(self) -> ContinuousState_[AutoDiffXd]: ...
    def CopyToVector(self) -> numpy.ndarray[object[m,1]]: ...
    def SetFrom(self, arg0: ContinuousState_[float]) -> None: ...
    def SetFromVector(self, value: numpy.ndarray[object[m,1]]) -> None: ...
    def get_generalized_position(self) -> VectorBase_[AutoDiffXd]: ...
    def get_generalized_velocity(self) -> VectorBase_[AutoDiffXd]: ...
    def get_misc_continuous_state(self) -> VectorBase_[AutoDiffXd]: ...
    def get_mutable_generalized_position(self) -> VectorBase_[AutoDiffXd]: ...
    def get_mutable_generalized_velocity(self) -> VectorBase_[AutoDiffXd]: ...
    def get_mutable_misc_continuous_state(self) -> VectorBase_[AutoDiffXd]: ...
    def get_mutable_vector(self) -> VectorBase_[AutoDiffXd]: ...
    def get_vector(self) -> VectorBase_[AutoDiffXd]: ...
    def num_q(self) -> int: ...
    def num_v(self) -> int: ...
    def num_z(self) -> int: ...
    def size(self) -> int: ...
    def __copy__(self) -> ContinuousState_[AutoDiffXd]: ...
    def __deepcopy__(self, arg0: dict) -> ContinuousState_[AutoDiffXd]: ...
    def __getitem__(self, arg0: int) -> pydrake.autodiffutils.AutoDiffXd: ...
    def __setitem__(self, arg0: int, arg1: pydrake.autodiffutils.AutoDiffXd) -> None: ...

class ContinuousState_[Expression]:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, state: VectorBase_[Expression]) -> None: ...
    @overload
    def __init__(self, state: VectorBase_[Expression], num_q: int, num_v: int, num_z: int) -> None: ...
    @overload
    def __init__(self) -> None: ...
    def Clone(self) -> ContinuousState_[Expression]: ...
    def CopyToVector(self) -> numpy.ndarray[object[m,1]]: ...
    def SetFrom(self, arg0: ContinuousState_[float]) -> None: ...
    def SetFromVector(self, value: numpy.ndarray[object[m,1]]) -> None: ...
    def get_generalized_position(self) -> VectorBase_[Expression]: ...
    def get_generalized_velocity(self) -> VectorBase_[Expression]: ...
    def get_misc_continuous_state(self) -> VectorBase_[Expression]: ...
    def get_mutable_generalized_position(self) -> VectorBase_[Expression]: ...
    def get_mutable_generalized_velocity(self) -> VectorBase_[Expression]: ...
    def get_mutable_misc_continuous_state(self) -> VectorBase_[Expression]: ...
    def get_mutable_vector(self) -> VectorBase_[Expression]: ...
    def get_vector(self) -> VectorBase_[Expression]: ...
    def num_q(self) -> int: ...
    def num_v(self) -> int: ...
    def num_z(self) -> int: ...
    def size(self) -> int: ...
    def __copy__(self) -> ContinuousState_[Expression]: ...
    def __deepcopy__(self, arg0: dict) -> ContinuousState_[Expression]: ...
    def __getitem__(self, arg0: int) -> pydrake.symbolic.Expression: ...
    def __setitem__(self, arg0: int, arg1: pydrake.symbolic.Expression) -> None: ...

class ContinuousState_[float]:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, state: VectorBase_[float]) -> None: ...
    @overload
    def __init__(self, state: VectorBase_[float], num_q: int, num_v: int, num_z: int) -> None: ...
    @overload
    def __init__(self) -> None: ...
    def Clone(self) -> ContinuousState_[float]: ...
    def CopyToVector(self) -> numpy.ndarray[numpy.float64[m,1]]: ...
    def SetFrom(self, arg0: ContinuousState_[float]) -> None: ...
    def SetFromVector(self, value: numpy.ndarray[numpy.float64[m,1]]) -> None: ...
    def get_generalized_position(self) -> VectorBase_[float]: ...
    def get_generalized_velocity(self) -> VectorBase_[float]: ...
    def get_misc_continuous_state(self) -> VectorBase_[float]: ...
    def get_mutable_generalized_position(self) -> VectorBase_[float]: ...
    def get_mutable_generalized_velocity(self) -> VectorBase_[float]: ...
    def get_mutable_misc_continuous_state(self) -> VectorBase_[float]: ...
    def get_mutable_vector(self) -> VectorBase_[float]: ...
    def get_vector(self) -> VectorBase_[float]: ...
    def num_q(self) -> int: ...
    def num_v(self) -> int: ...
    def num_z(self) -> int: ...
    def size(self) -> int: ...
    def __copy__(self) -> ContinuousState_[float]: ...
    def __deepcopy__(self, arg0: dict) -> ContinuousState_[float]: ...
    def __getitem__(self, arg0: int) -> float: ...
    def __setitem__(self, arg0: int, arg1: float) -> None: ...

class DependencyTicket:
    _pybind11_del_orig: ClassVar[None] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: int) -> None: ...
    def is_valid(self) -> bool: ...
    def __del__(self, *args, **kwargs) -> Any: ...
    @overload
    def __eq__(self, arg0: DependencyTicket) -> bool: ...
    @overload
    def __eq__(self, arg0: int) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __lt__(self, arg0: DependencyTicket) -> bool: ...

class Diagram(System_[float]):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self) -> None: ...
    def GetInputPortLocators(self, port_index: InputPortIndex) -> list: ...
    def GetMutableSubsystemState(self, arg0: System_[float], arg1: Context_[float]) -> State_[float]: ...
    def GetSubsystemByName(self, name: str) -> System_[float]: ...
    def GetSystems(self) -> list: ...
    def connection_map(self) -> dict: ...
    def get_output_port_locator(self, port_index: OutputPortIndex) -> tuple: ...

class DiagramBuilder:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self) -> None: ...
    def AddNamedSystem(self, *args, **kwargs) -> Any: ...
    def AddSystem(self, std) -> Any: ...
    def Build(self, *args, **kwargs) -> Any: ...
    def BuildInto(self, target) -> None: ...
    def Connect(self, arg0, arg1) -> None: ...
    @overload
    def ConnectInput(self, diagram_port_name: str, input) -> None: ...
    @overload
    def ConnectInput(self, diagram_port_index: InputPortIndex, input) -> None: ...
    def ConnectToSame(self, exemplar, dest) -> bool: ...
    def ExportInput(self, input, name: Union[str,UseDefaultName] = ...) -> InputPortIndex: ...
    def ExportOutput(self, output, name: Union[str,UseDefaultName] = ...) -> OutputPortIndex: ...
    def GetMutableSubsystemByName(self, *args, **kwargs) -> Any: ...
    def GetMutableSystems(self) -> list: ...
    def GetSubsystemByName(self, *args, **kwargs) -> Any: ...
    def GetSystems(self) -> list: ...
    def connection_map(self) -> dict: ...
    def empty(self) -> bool: ...

class DiagramBuilder_[AutoDiffXd]:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self) -> None: ...
    def AddNamedSystem(self, *args, **kwargs) -> Any: ...
    def AddSystem(self, std) -> Any: ...
    def Build(self, *args, **kwargs) -> Any: ...
    def BuildInto(self, *args, **kwargs) -> Any: ...
    def Connect(self, *args, **kwargs) -> Any: ...
    def ConnectInput(self, *args, **kwargs) -> Any: ...
    def ConnectToSame(self, *args, **kwargs) -> Any: ...
    def ExportInput(self, *args, **kwargs) -> Any: ...
    def ExportOutput(self, *args, **kwargs) -> Any: ...
    def GetMutableSubsystemByName(self, *args, **kwargs) -> Any: ...
    def GetMutableSystems(self) -> list: ...
    def GetSubsystemByName(self, *args, **kwargs) -> Any: ...
    def GetSystems(self) -> list: ...
    def connection_map(self) -> dict: ...
    def empty(self) -> bool: ...

class DiagramBuilder_[Expression]:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self) -> None: ...
    def AddNamedSystem(self, *args, **kwargs) -> Any: ...
    def AddSystem(self, std) -> Any: ...
    def Build(self, *args, **kwargs) -> Any: ...
    def BuildInto(self, target) -> None: ...
    def Connect(self, arg0, arg1) -> None: ...
    @overload
    def ConnectInput(self, diagram_port_name: str, input) -> None: ...
    @overload
    def ConnectInput(self, diagram_port_index: InputPortIndex, input) -> None: ...
    def ConnectToSame(self, exemplar, dest) -> bool: ...
    def ExportInput(self, input, name: Union[str,UseDefaultName] = ...) -> InputPortIndex: ...
    def ExportOutput(self, output, name: Union[str,UseDefaultName] = ...) -> OutputPortIndex: ...
    def GetMutableSubsystemByName(self, *args, **kwargs) -> Any: ...
    def GetMutableSystems(self) -> list: ...
    def GetSubsystemByName(self, *args, **kwargs) -> Any: ...
    def GetSystems(self) -> list: ...
    def connection_map(self) -> dict: ...
    def empty(self) -> bool: ...

class DiagramBuilder_[float]:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self) -> None: ...
    def AddNamedSystem(self, *args, **kwargs) -> Any: ...
    def AddSystem(self, std) -> Any: ...
    def Build(self, *args, **kwargs) -> Any: ...
    def BuildInto(self, target) -> None: ...
    def Connect(self, arg0, arg1) -> None: ...
    @overload
    def ConnectInput(self, diagram_port_name: str, input) -> None: ...
    @overload
    def ConnectInput(self, diagram_port_index: InputPortIndex, input) -> None: ...
    def ConnectToSame(self, exemplar, dest) -> bool: ...
    def ExportInput(self, input, name: Union[str,UseDefaultName] = ...) -> InputPortIndex: ...
    def ExportOutput(self, output, name: Union[str,UseDefaultName] = ...) -> OutputPortIndex: ...
    def GetMutableSubsystemByName(self, *args, **kwargs) -> Any: ...
    def GetMutableSystems(self) -> list: ...
    def GetSubsystemByName(self, *args, **kwargs) -> Any: ...
    def GetSystems(self) -> list: ...
    def connection_map(self) -> dict: ...
    def empty(self) -> bool: ...

class Diagram_[AutoDiffXd](System_[AutoDiffXd]):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self) -> None: ...
    def GetInputPortLocators(self, port_index: InputPortIndex) -> list: ...
    def GetMutableSubsystemState(self, arg0: System_[AutoDiffXd], arg1: Context_[AutoDiffXd]) -> State_[AutoDiffXd]: ...
    def GetSubsystemByName(self, name: str) -> System_[AutoDiffXd]: ...
    def GetSystems(self) -> list: ...
    def connection_map(self) -> dict: ...
    def get_output_port_locator(self, port_index: OutputPortIndex) -> tuple: ...

class Diagram_[Expression](System_[Expression]):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self) -> None: ...
    def GetInputPortLocators(self, port_index: InputPortIndex) -> list: ...
    def GetMutableSubsystemState(self, arg0: System_[Expression], arg1: Context_[Expression]) -> State_[Expression]: ...
    def GetSubsystemByName(self, name: str) -> System_[Expression]: ...
    def GetSystems(self) -> list: ...
    def connection_map(self) -> dict: ...
    def get_output_port_locator(self, port_index: OutputPortIndex) -> tuple: ...

class Diagram_[float](System_[float]):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self) -> None: ...
    def GetInputPortLocators(self, port_index: InputPortIndex) -> list: ...
    def GetMutableSubsystemState(self, arg0: System_[float], arg1: Context_[float]) -> State_[float]: ...
    def GetSubsystemByName(self, name: str) -> System_[float]: ...
    def GetSystems(self) -> list: ...
    def connection_map(self) -> dict: ...
    def get_output_port_locator(self, port_index: OutputPortIndex) -> tuple: ...

class DiscreteStateIndex:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: int) -> None: ...
    def is_valid(self) -> bool: ...
    @overload
    def __eq__(self, arg0: DiscreteStateIndex) -> bool: ...
    @overload
    def __eq__(self, arg0: int) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __lt__(self, arg0: DiscreteStateIndex) -> bool: ...

class DiscreteUpdateEvent(Event_[float]):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class DiscreteUpdateEvent_[AutoDiffXd](Event_[AutoDiffXd]):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class DiscreteUpdateEvent_[Expression](Event_[Expression]):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class DiscreteUpdateEvent_[float](Event_[float]):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class DiscreteValues:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, datum: BasicVector_[float]) -> None: ...
    @overload
    def __init__(self, data: List[BasicVector_[float]]) -> None: ...
    @overload
    def __init__(self) -> None: ...
    def Clone(self) -> DiscreteValues_[float]: ...
    def SetFrom(self, arg0: DiscreteValues_[float]) -> None: ...
    def get_data(self) -> List[BasicVector_[float]]: ...
    def get_mutable_value(self, index: int = ...) -> numpy.ndarray[numpy.float64[m,1]]: ...
    def get_mutable_vector(self, index: int = ...) -> BasicVector_[float]: ...
    def get_value(self, index: int = ...) -> numpy.ndarray[numpy.float64[m,1]]: ...
    def get_vector(self, index: int = ...) -> BasicVector_[float]: ...
    def num_groups(self) -> int: ...
    @overload
    def set_value(self, value: numpy.ndarray[numpy.float64[m,1]]) -> None: ...
    @overload
    def set_value(self, index: int, value: numpy.ndarray[numpy.float64[m,1]]) -> None: ...
    def size(self) -> int: ...
    def value(self, index: int = ...) -> numpy.ndarray[numpy.float64[m,1]]: ...
    def __copy__(self) -> DiscreteValues_[float]: ...
    def __deepcopy__(self, arg0: dict) -> DiscreteValues_[float]: ...
    def __getitem__(self, arg0: int) -> float: ...
    def __setitem__(self, arg0: int, arg1: float) -> None: ...

class DiscreteValues_[AutoDiffXd]:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, datum: BasicVector_[AutoDiffXd]) -> None: ...
    @overload
    def __init__(self, data: List[BasicVector_[AutoDiffXd]]) -> None: ...
    @overload
    def __init__(self) -> None: ...
    def Clone(self) -> DiscreteValues_[AutoDiffXd]: ...
    def SetFrom(self, arg0: DiscreteValues_[float]) -> None: ...
    def get_data(self) -> List[BasicVector_[AutoDiffXd]]: ...
    def get_mutable_value(self, index: int = ...) -> numpy.ndarray[object[m,1]]: ...
    def get_mutable_vector(self, index: int = ...) -> BasicVector_[AutoDiffXd]: ...
    def get_value(self, index: int = ...) -> numpy.ndarray[object[m,1]]: ...
    def get_vector(self, index: int = ...) -> BasicVector_[AutoDiffXd]: ...
    def num_groups(self) -> int: ...
    @overload
    def set_value(self, value: numpy.ndarray[object[m,1]]) -> None: ...
    @overload
    def set_value(self, index: int, value: numpy.ndarray[object[m,1]]) -> None: ...
    def size(self) -> int: ...
    def value(self, index: int = ...) -> numpy.ndarray[object[m,1]]: ...
    def __copy__(self) -> DiscreteValues_[AutoDiffXd]: ...
    def __deepcopy__(self, arg0: dict) -> DiscreteValues_[AutoDiffXd]: ...
    def __getitem__(self, arg0: int) -> pydrake.autodiffutils.AutoDiffXd: ...
    def __setitem__(self, arg0: int, arg1: pydrake.autodiffutils.AutoDiffXd) -> None: ...

class DiscreteValues_[Expression]:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, datum: BasicVector_[Expression]) -> None: ...
    @overload
    def __init__(self, data: List[BasicVector_[Expression]]) -> None: ...
    @overload
    def __init__(self) -> None: ...
    def Clone(self) -> DiscreteValues_[Expression]: ...
    def SetFrom(self, arg0: DiscreteValues_[float]) -> None: ...
    def get_data(self) -> List[BasicVector_[Expression]]: ...
    def get_mutable_value(self, index: int = ...) -> numpy.ndarray[object[m,1]]: ...
    def get_mutable_vector(self, index: int = ...) -> BasicVector_[Expression]: ...
    def get_value(self, index: int = ...) -> numpy.ndarray[object[m,1]]: ...
    def get_vector(self, index: int = ...) -> BasicVector_[Expression]: ...
    def num_groups(self) -> int: ...
    @overload
    def set_value(self, value: numpy.ndarray[object[m,1]]) -> None: ...
    @overload
    def set_value(self, index: int, value: numpy.ndarray[object[m,1]]) -> None: ...
    def size(self) -> int: ...
    def value(self, index: int = ...) -> numpy.ndarray[object[m,1]]: ...
    def __copy__(self) -> DiscreteValues_[Expression]: ...
    def __deepcopy__(self, arg0: dict) -> DiscreteValues_[Expression]: ...
    def __getitem__(self, arg0: int) -> pydrake.symbolic.Expression: ...
    def __setitem__(self, arg0: int, arg1: pydrake.symbolic.Expression) -> None: ...

class DiscreteValues_[float]:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, datum: BasicVector_[float]) -> None: ...
    @overload
    def __init__(self, data: List[BasicVector_[float]]) -> None: ...
    @overload
    def __init__(self) -> None: ...
    def Clone(self) -> DiscreteValues_[float]: ...
    def SetFrom(self, arg0: DiscreteValues_[float]) -> None: ...
    def get_data(self) -> List[BasicVector_[float]]: ...
    def get_mutable_value(self, index: int = ...) -> numpy.ndarray[numpy.float64[m,1]]: ...
    def get_mutable_vector(self, index: int = ...) -> BasicVector_[float]: ...
    def get_value(self, index: int = ...) -> numpy.ndarray[numpy.float64[m,1]]: ...
    def get_vector(self, index: int = ...) -> BasicVector_[float]: ...
    def num_groups(self) -> int: ...
    @overload
    def set_value(self, value: numpy.ndarray[numpy.float64[m,1]]) -> None: ...
    @overload
    def set_value(self, index: int, value: numpy.ndarray[numpy.float64[m,1]]) -> None: ...
    def size(self) -> int: ...
    def value(self, index: int = ...) -> numpy.ndarray[numpy.float64[m,1]]: ...
    def __copy__(self) -> DiscreteValues_[float]: ...
    def __deepcopy__(self, arg0: dict) -> DiscreteValues_[float]: ...
    def __getitem__(self, arg0: int) -> float: ...
    def __setitem__(self, arg0: int, arg1: float) -> None: ...

class Event:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def get_trigger_type(self) -> TriggerType: ...

class EventStatus:
    class Severity:
        __members__: ClassVar[dict] = ...  # read-only
        __entries: ClassVar[dict] = ...
        _pybind11_del_orig: ClassVar[None] = ...
        kDidNothing: ClassVar[EventStatus.Severity] = ...
        kFailed: ClassVar[EventStatus.Severity] = ...
        kReachedTermination: ClassVar[EventStatus.Severity] = ...
        kSucceeded: ClassVar[EventStatus.Severity] = ...
        def __init__(self, value: int) -> None: ...
        def __del__(self, *args, **kwargs) -> Any: ...
        def __eq__(self, other: object) -> bool: ...
        def __getstate__(self) -> int: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __ne__(self, other: object) -> bool: ...
        def __setstate__(self, state: int) -> None: ...
        @property
        def name(self) -> str: ...
        @property
        def value(self) -> int: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def DidNothing(self, *args, **kwargs) -> Any: ...
    def Failed(self, *args, **kwargs) -> Any: ...
    def KeepMoreSevere(self, candidate: EventStatus) -> EventStatus: ...
    def ReachedTermination(self, *args, **kwargs) -> Any: ...
    def Succeeded(self, *args, **kwargs) -> Any: ...
    def message(self) -> str: ...
    def severity(self) -> EventStatus.Severity: ...
    def system(self, *args, **kwargs) -> Any: ...
    def __copy__(self) -> EventStatus: ...
    def __deepcopy__(self, arg0: dict) -> EventStatus: ...

class Event_[AutoDiffXd]:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def get_trigger_type(self) -> TriggerType: ...

class Event_[Expression]:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def get_trigger_type(self) -> TriggerType: ...

class Event_[float]:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def get_trigger_type(self) -> TriggerType: ...

class FixedInputPortValue:
    def __init__(self, *args, **kwargs) -> None: ...
    def GetMutableData(self) -> pydrake.common.value.AbstractValue: ...

class InputPort:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def Allocate(self) -> pydrake.common.value.AbstractValue: ...
    def Eval(self, arg0: Context_[float]) -> object: ...
    def EvalAbstract(self, context: Context_[float]) -> pydrake.common.value.AbstractValue: ...
    def EvalBasicVector(self, context: Context_[float]) -> object: ...
    @overload
    def FixValue(self, context: Context_[float], value: pydrake.common.value.AbstractValue) -> FixedInputPortValue: ...
    @overload
    def FixValue(self, context: Context_[float], value: object) -> FixedInputPortValue: ...
    def GetFullDescription(self) -> str: ...
    def HasValue(self, context: Context_[float]) -> bool: ...
    def get_data_type(self) -> PortDataType: ...
    def get_index(self) -> InputPortIndex: ...
    def get_name(self) -> str: ...
    def get_system(self, *args, **kwargs) -> Any: ...
    def size(self) -> int: ...
    def ticket(self) -> DependencyTicket: ...

class InputPortIndex:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: int) -> None: ...
    def is_valid(self) -> bool: ...
    @overload
    def __eq__(self, arg0: InputPortIndex) -> bool: ...
    @overload
    def __eq__(self, arg0: int) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __lt__(self, arg0: InputPortIndex) -> bool: ...

class InputPortSelection:
    __members__: ClassVar[dict] = ...  # read-only
    __entries: ClassVar[dict] = ...
    _pybind11_del_orig: ClassVar[None] = ...
    kNoInput: ClassVar[InputPortSelection] = ...
    kUseFirstInputIfItExists: ClassVar[InputPortSelection] = ...
    def __init__(self, value: int) -> None: ...
    def __del__(self, *args, **kwargs) -> Any: ...
    def __eq__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    def __setstate__(self, state: int) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class InputPort_[AutoDiffXd]:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def Allocate(self) -> pydrake.common.value.AbstractValue: ...
    def Eval(self, arg0: Context_[AutoDiffXd]) -> object: ...
    def EvalAbstract(self, context: Context_[AutoDiffXd]) -> pydrake.common.value.AbstractValue: ...
    def EvalBasicVector(self, context: Context_[AutoDiffXd]) -> object: ...
    @overload
    def FixValue(self, context: Context_[AutoDiffXd], value: pydrake.common.value.AbstractValue) -> FixedInputPortValue: ...
    @overload
    def FixValue(self, context: Context_[AutoDiffXd], value: object) -> FixedInputPortValue: ...
    def GetFullDescription(self) -> str: ...
    def HasValue(self, context: Context_[AutoDiffXd]) -> bool: ...
    def get_data_type(self) -> PortDataType: ...
    def get_index(self) -> InputPortIndex: ...
    def get_name(self) -> str: ...
    def get_system(self, *args, **kwargs) -> Any: ...
    def size(self) -> int: ...
    def ticket(self) -> DependencyTicket: ...

class InputPort_[Expression]:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def Allocate(self) -> pydrake.common.value.AbstractValue: ...
    def Eval(self, arg0: Context_[Expression]) -> object: ...
    def EvalAbstract(self, context: Context_[Expression]) -> pydrake.common.value.AbstractValue: ...
    def EvalBasicVector(self, context: Context_[Expression]) -> object: ...
    @overload
    def FixValue(self, context: Context_[Expression], value: pydrake.common.value.AbstractValue) -> FixedInputPortValue: ...
    @overload
    def FixValue(self, context: Context_[Expression], value: object) -> FixedInputPortValue: ...
    def GetFullDescription(self) -> str: ...
    def HasValue(self, context: Context_[Expression]) -> bool: ...
    def get_data_type(self) -> PortDataType: ...
    def get_index(self) -> InputPortIndex: ...
    def get_name(self) -> str: ...
    def get_system(self, *args, **kwargs) -> Any: ...
    def size(self) -> int: ...
    def ticket(self) -> DependencyTicket: ...

class InputPort_[float]:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def Allocate(self) -> pydrake.common.value.AbstractValue: ...
    def Eval(self, arg0: Context_[float]) -> object: ...
    def EvalAbstract(self, context: Context_[float]) -> pydrake.common.value.AbstractValue: ...
    def EvalBasicVector(self, context: Context_[float]) -> object: ...
    @overload
    def FixValue(self, context: Context_[float], value: pydrake.common.value.AbstractValue) -> FixedInputPortValue: ...
    @overload
    def FixValue(self, context: Context_[float], value: object) -> FixedInputPortValue: ...
    def GetFullDescription(self) -> str: ...
    def HasValue(self, context: Context_[float]) -> bool: ...
    def get_data_type(self) -> PortDataType: ...
    def get_index(self) -> InputPortIndex: ...
    def get_name(self) -> str: ...
    def get_system(self, *args, **kwargs) -> Any: ...
    def size(self) -> int: ...
    def ticket(self) -> DependencyTicket: ...

class LeafContext(Context_[float]):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class LeafContext_[AutoDiffXd](Context_[AutoDiffXd]):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class LeafContext_[Expression](Context_[Expression]):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class LeafContext_[float](Context_[float]):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class LeafOutputPort(OutputPort_[float]):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @overload
    def disable_caching_by_default(self) -> None: ...
    @overload
    def disable_caching_by_default(self) -> Any: ...

class LeafOutputPort_[AutoDiffXd](OutputPort_[AutoDiffXd]):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @overload
    def disable_caching_by_default(self) -> None: ...
    @overload
    def disable_caching_by_default(self) -> Any: ...

class LeafOutputPort_[Expression](OutputPort_[Expression]):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @overload
    def disable_caching_by_default(self) -> None: ...
    @overload
    def disable_caching_by_default(self) -> Any: ...

class LeafOutputPort_[float](OutputPort_[float]):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @overload
    def disable_caching_by_default(self) -> None: ...
    @overload
    def disable_caching_by_default(self) -> Any: ...

class LeafSystem(System_[float]):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, converter: SystemScalarConverter) -> None: ...
    def DeclareAbstractInputPort(self, name: str, model_value: pydrake.common.value.AbstractValue) -> InputPort_[float]: ...
    def DeclareAbstractOutputPort(self, name: str, alloc: Callable[[],pydrake.common.value.AbstractValue], calc: Callable[[Context_[float],pydrake.common.value.AbstractValue],None], prerequisites_of_calc: Set[DependencyTicket] = ...) -> OutputPort_[float]: ...
    def DeclareAbstractParameter(self, model_value: pydrake.common.value.AbstractValue) -> int: ...
    def DeclareAbstractState(self, model_value: pydrake.common.value.AbstractValue) -> AbstractStateIndex: ...
    @overload
    def DeclareContinuousState(self, num_state_variables: int) -> ContinuousStateIndex: ...
    @overload
    def DeclareContinuousState(self, num_q: int, num_v: int, num_z: int) -> ContinuousStateIndex: ...
    @overload
    def DeclareContinuousState(self, model_vector: BasicVector_[float]) -> ContinuousStateIndex: ...
    @overload
    def DeclareContinuousState(self, model_vector: BasicVector_[float], num_q: int, num_v: int, num_z: int) -> ContinuousStateIndex: ...
    @overload
    def DeclareDiscreteState(self, model_vector: BasicVector_[float]) -> DiscreteStateIndex: ...
    @overload
    def DeclareDiscreteState(self, vector: numpy.ndarray[numpy.float64[m,1]]) -> DiscreteStateIndex: ...
    @overload
    def DeclareDiscreteState(self, num_state_variables: int) -> DiscreteStateIndex: ...
    @overload
    def DeclareDiscreteState(self) -> Any: ...
    @overload
    def DeclareForcedDiscreteUpdateEvent(self, update: Callable[[Context_[float],DiscreteValues_[float]],Optional[EventStatus]]) -> None: ...
    @overload
    def DeclareForcedDiscreteUpdateEvent(self) -> Any: ...
    @overload
    def DeclareForcedPublishEvent(self, publish: Callable[[Context_[float]],Optional[EventStatus]]) -> None: ...
    @overload
    def DeclareForcedPublishEvent(self) -> Any: ...
    @overload
    def DeclareForcedUnrestrictedUpdateEvent(self, update: Callable[[Context_[float],State_[float]],Optional[EventStatus]]) -> None: ...
    @overload
    def DeclareForcedUnrestrictedUpdateEvent(self) -> Any: ...
    def DeclareInitializationDiscreteUpdateEvent(self, update: Callable[[Context_[float],DiscreteValues_[float]],Optional[EventStatus]]) -> None: ...
    def DeclareInitializationEvent(self, event: Event_[float]) -> None: ...
    def DeclareInitializationPublishEvent(self, publish: Callable[[Context_[float]],Optional[EventStatus]]) -> None: ...
    def DeclareInitializationUnrestrictedUpdateEvent(self, update: Callable[[Context_[float],State_[float]],Optional[EventStatus]]) -> None: ...
    def DeclareNumericParameter(self, model_vector: BasicVector_[float]) -> int: ...
    def DeclarePerStepDiscreteUpdateEvent(self, update: Callable[[Context_[float],DiscreteValues_[float]],Optional[EventStatus]]) -> None: ...
    def DeclarePerStepEvent(self, event: Event_[float]) -> None: ...
    def DeclarePerStepPublishEvent(self, publish: Callable[[Context_[float]],Optional[EventStatus]]) -> None: ...
    def DeclarePerStepUnrestrictedUpdateEvent(self, update: Callable[[Context_[float],State_[float]],Optional[EventStatus]]) -> None: ...
    def DeclarePeriodicDiscreteUpdate(self, period_sec: float, offset_sec: float = ...) -> None: ...
    def DeclarePeriodicDiscreteUpdateEvent(self, period_sec: float, offset_sec: float, update: Callable[[Context_[float],DiscreteValues_[float]],Optional[EventStatus]]) -> None: ...
    def DeclarePeriodicDiscreteUpdateNoHandler(self, period_sec: float, offset_sec: float = ...) -> None: ...
    def DeclarePeriodicEvent(self, period_sec: float, offset_sec: float, event: Event_[float]) -> None: ...
    def DeclarePeriodicPublish(self, period_sec: float, offset_sec: float = ...) -> None: ...
    def DeclarePeriodicPublishEvent(self, period_sec: float, offset_sec: float, publish: Callable[[Context_[float]],Optional[EventStatus]]) -> None: ...
    def DeclarePeriodicPublishNoHandler(self, period_sec: float, offset_sec: float = ...) -> None: ...
    def DeclarePeriodicUnrestrictedUpdateEvent(self, period_sec: float, offset_sec: float, update: Callable[[Context_[float],State_[float]],Optional[EventStatus]]) -> None: ...
    @overload
    def DeclareStateOutputPort(self, name: Union[str,UseDefaultName], state_index: ContinuousStateIndex) -> LeafOutputPort_[float]: ...
    @overload
    def DeclareStateOutputPort(self, name: Union[str,UseDefaultName], state_index: DiscreteStateIndex) -> LeafOutputPort_[float]: ...
    @overload
    def DeclareStateOutputPort(self, name: Union[str,UseDefaultName], state_index: AbstractStateIndex) -> LeafOutputPort_[float]: ...
    @overload
    def DeclareVectorInputPort(self, name: str, model_vector: BasicVector_[float], random_type: Optional[pydrake.common._module_py.RandomDistribution] = ...) -> InputPort_[float]: ...
    @overload
    def DeclareVectorInputPort(self, name: str, size: int, random_type: Optional[pydrake.common._module_py.RandomDistribution] = ...) -> InputPort_[float]: ...
    @overload
    def DeclareVectorOutputPort(self, name: str, model_value: BasicVector_[float], calc: Callable[[Context_[float],BasicVector_[float]],None], prerequisites_of_calc: Set[DependencyTicket] = ...) -> OutputPort_[float]: ...
    @overload
    def DeclareVectorOutputPort(self, name: str, size: int, calc: Callable[[Context_[float],BasicVector_[float]],None], prerequisites_of_calc: Set[DependencyTicket] = ...) -> OutputPort_[float]: ...
    def DoCalcDiscreteVariableUpdates(self, arg0: Context_[float], arg1: List[DiscreteUpdateEvent_[float]], arg2: DiscreteValues_[float]) -> None: ...
    def DoCalcTimeDerivatives(self, arg0: Context_[float], arg1: ContinuousState_[float]) -> None: ...
    def DoPublish(self, arg0: Context_[float], arg1: List[PublishEvent_[float]]) -> None: ...
    @overload
    def MakeWitnessFunction(self, description: str, direction_type: WitnessFunctionDirection, calc: Callable[[Context_[float]],float]) -> WitnessFunction_[float]: ...
    @overload
    def MakeWitnessFunction(self, description: str, direction_type: WitnessFunctionDirection, calc: Callable[[Context_[float]],float], e: Event_[float]) -> WitnessFunction_[float]: ...

class LeafSystem_[AutoDiffXd](System_[AutoDiffXd]):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, converter: SystemScalarConverter) -> None: ...
    def DeclareAbstractInputPort(self, name: str, model_value: pydrake.common.value.AbstractValue) -> InputPort_[AutoDiffXd]: ...
    def DeclareAbstractOutputPort(self, name: str, alloc: Callable[[],pydrake.common.value.AbstractValue], calc: Callable[[Context_[AutoDiffXd],pydrake.common.value.AbstractValue],None], prerequisites_of_calc: Set[DependencyTicket] = ...) -> OutputPort_[AutoDiffXd]: ...
    def DeclareAbstractParameter(self, model_value: pydrake.common.value.AbstractValue) -> int: ...
    def DeclareAbstractState(self, model_value: pydrake.common.value.AbstractValue) -> AbstractStateIndex: ...
    @overload
    def DeclareContinuousState(self, num_state_variables: int) -> ContinuousStateIndex: ...
    @overload
    def DeclareContinuousState(self, num_q: int, num_v: int, num_z: int) -> ContinuousStateIndex: ...
    @overload
    def DeclareContinuousState(self, model_vector: BasicVector_[AutoDiffXd]) -> ContinuousStateIndex: ...
    @overload
    def DeclareContinuousState(self, model_vector: BasicVector_[AutoDiffXd], num_q: int, num_v: int, num_z: int) -> ContinuousStateIndex: ...
    @overload
    def DeclareDiscreteState(self, model_vector: BasicVector_[AutoDiffXd]) -> DiscreteStateIndex: ...
    @overload
    def DeclareDiscreteState(self, vector: numpy.ndarray[object[m,1]]) -> DiscreteStateIndex: ...
    @overload
    def DeclareDiscreteState(self, num_state_variables: int) -> DiscreteStateIndex: ...
    @overload
    def DeclareDiscreteState(self) -> Any: ...
    @overload
    def DeclareForcedDiscreteUpdateEvent(self, update: Callable[[Context_[AutoDiffXd],DiscreteValues_[AutoDiffXd]],Optional[EventStatus]]) -> None: ...
    @overload
    def DeclareForcedDiscreteUpdateEvent(self) -> Any: ...
    @overload
    def DeclareForcedPublishEvent(self, publish: Callable[[Context_[AutoDiffXd]],Optional[EventStatus]]) -> None: ...
    @overload
    def DeclareForcedPublishEvent(self) -> Any: ...
    @overload
    def DeclareForcedUnrestrictedUpdateEvent(self, update: Callable[[Context_[AutoDiffXd],State_[AutoDiffXd]],Optional[EventStatus]]) -> None: ...
    @overload
    def DeclareForcedUnrestrictedUpdateEvent(self) -> Any: ...
    def DeclareInitializationDiscreteUpdateEvent(self, update: Callable[[Context_[AutoDiffXd],DiscreteValues_[AutoDiffXd]],Optional[EventStatus]]) -> None: ...
    def DeclareInitializationEvent(self, event: Event_[AutoDiffXd]) -> None: ...
    def DeclareInitializationPublishEvent(self, publish: Callable[[Context_[AutoDiffXd]],Optional[EventStatus]]) -> None: ...
    def DeclareInitializationUnrestrictedUpdateEvent(self, update: Callable[[Context_[AutoDiffXd],State_[AutoDiffXd]],Optional[EventStatus]]) -> None: ...
    def DeclareNumericParameter(self, model_vector: BasicVector_[AutoDiffXd]) -> int: ...
    def DeclarePerStepDiscreteUpdateEvent(self, update: Callable[[Context_[AutoDiffXd],DiscreteValues_[AutoDiffXd]],Optional[EventStatus]]) -> None: ...
    def DeclarePerStepEvent(self, event: Event_[AutoDiffXd]) -> None: ...
    def DeclarePerStepPublishEvent(self, publish: Callable[[Context_[AutoDiffXd]],Optional[EventStatus]]) -> None: ...
    def DeclarePerStepUnrestrictedUpdateEvent(self, update: Callable[[Context_[AutoDiffXd],State_[AutoDiffXd]],Optional[EventStatus]]) -> None: ...
    def DeclarePeriodicDiscreteUpdate(self, period_sec: float, offset_sec: float = ...) -> None: ...
    def DeclarePeriodicDiscreteUpdateEvent(self, period_sec: float, offset_sec: float, update: Callable[[Context_[AutoDiffXd],DiscreteValues_[AutoDiffXd]],Optional[EventStatus]]) -> None: ...
    def DeclarePeriodicDiscreteUpdateNoHandler(self, period_sec: float, offset_sec: float = ...) -> None: ...
    def DeclarePeriodicEvent(self, period_sec: float, offset_sec: float, event: Event_[AutoDiffXd]) -> None: ...
    def DeclarePeriodicPublish(self, period_sec: float, offset_sec: float = ...) -> None: ...
    def DeclarePeriodicPublishEvent(self, period_sec: float, offset_sec: float, publish: Callable[[Context_[AutoDiffXd]],Optional[EventStatus]]) -> None: ...
    def DeclarePeriodicPublishNoHandler(self, period_sec: float, offset_sec: float = ...) -> None: ...
    def DeclarePeriodicUnrestrictedUpdateEvent(self, period_sec: float, offset_sec: float, update: Callable[[Context_[AutoDiffXd],State_[AutoDiffXd]],Optional[EventStatus]]) -> None: ...
    @overload
    def DeclareStateOutputPort(self, name: Union[str,UseDefaultName], state_index: ContinuousStateIndex) -> LeafOutputPort_[AutoDiffXd]: ...
    @overload
    def DeclareStateOutputPort(self, name: Union[str,UseDefaultName], state_index: DiscreteStateIndex) -> LeafOutputPort_[AutoDiffXd]: ...
    @overload
    def DeclareStateOutputPort(self, name: Union[str,UseDefaultName], state_index: AbstractStateIndex) -> LeafOutputPort_[AutoDiffXd]: ...
    @overload
    def DeclareVectorInputPort(self, name: str, model_vector: BasicVector_[AutoDiffXd], random_type: Optional[pydrake.common._module_py.RandomDistribution] = ...) -> InputPort_[AutoDiffXd]: ...
    @overload
    def DeclareVectorInputPort(self, name: str, size: int, random_type: Optional[pydrake.common._module_py.RandomDistribution] = ...) -> InputPort_[AutoDiffXd]: ...
    @overload
    def DeclareVectorOutputPort(self, name: str, model_value: BasicVector_[AutoDiffXd], calc: Callable[[Context_[AutoDiffXd],BasicVector_[AutoDiffXd]],None], prerequisites_of_calc: Set[DependencyTicket] = ...) -> OutputPort_[AutoDiffXd]: ...
    @overload
    def DeclareVectorOutputPort(self, name: str, size: int, calc: Callable[[Context_[AutoDiffXd],BasicVector_[AutoDiffXd]],None], prerequisites_of_calc: Set[DependencyTicket] = ...) -> OutputPort_[AutoDiffXd]: ...
    def DoCalcDiscreteVariableUpdates(self, arg0: Context_[AutoDiffXd], arg1: List[DiscreteUpdateEvent_[AutoDiffXd]], arg2: DiscreteValues_[AutoDiffXd]) -> None: ...
    def DoCalcTimeDerivatives(self, arg0: Context_[AutoDiffXd], arg1: ContinuousState_[AutoDiffXd]) -> None: ...
    def DoPublish(self, arg0: Context_[AutoDiffXd], arg1: List[PublishEvent_[AutoDiffXd]]) -> None: ...
    @overload
    def MakeWitnessFunction(self, description: str, direction_type: WitnessFunctionDirection, calc: Callable[[Context_[AutoDiffXd]],pydrake.autodiffutils.AutoDiffXd]) -> WitnessFunction_[AutoDiffXd]: ...
    @overload
    def MakeWitnessFunction(self, description: str, direction_type: WitnessFunctionDirection, calc: Callable[[Context_[AutoDiffXd]],pydrake.autodiffutils.AutoDiffXd], e: Event_[AutoDiffXd]) -> WitnessFunction_[AutoDiffXd]: ...

class LeafSystem_[Expression](System_[Expression]):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, converter: SystemScalarConverter) -> None: ...
    def DeclareAbstractInputPort(self, name: str, model_value: pydrake.common.value.AbstractValue) -> InputPort_[Expression]: ...
    def DeclareAbstractOutputPort(self, name: str, alloc: Callable[[],pydrake.common.value.AbstractValue], calc: Callable[[Context_[Expression],pydrake.common.value.AbstractValue],None], prerequisites_of_calc: Set[DependencyTicket] = ...) -> OutputPort_[Expression]: ...
    def DeclareAbstractParameter(self, model_value: pydrake.common.value.AbstractValue) -> int: ...
    def DeclareAbstractState(self, model_value: pydrake.common.value.AbstractValue) -> AbstractStateIndex: ...
    @overload
    def DeclareContinuousState(self, num_state_variables: int) -> ContinuousStateIndex: ...
    @overload
    def DeclareContinuousState(self, num_q: int, num_v: int, num_z: int) -> ContinuousStateIndex: ...
    @overload
    def DeclareContinuousState(self, model_vector: BasicVector_[Expression]) -> ContinuousStateIndex: ...
    @overload
    def DeclareContinuousState(self, model_vector: BasicVector_[Expression], num_q: int, num_v: int, num_z: int) -> ContinuousStateIndex: ...
    @overload
    def DeclareDiscreteState(self, model_vector: BasicVector_[Expression]) -> DiscreteStateIndex: ...
    @overload
    def DeclareDiscreteState(self, vector: numpy.ndarray[object[m,1]]) -> DiscreteStateIndex: ...
    @overload
    def DeclareDiscreteState(self, num_state_variables: int) -> DiscreteStateIndex: ...
    @overload
    def DeclareDiscreteState(self) -> Any: ...
    @overload
    def DeclareForcedDiscreteUpdateEvent(self, update: Callable[[Context_[Expression],DiscreteValues_[Expression]],Optional[EventStatus]]) -> None: ...
    @overload
    def DeclareForcedDiscreteUpdateEvent(self) -> Any: ...
    @overload
    def DeclareForcedPublishEvent(self, publish: Callable[[Context_[Expression]],Optional[EventStatus]]) -> None: ...
    @overload
    def DeclareForcedPublishEvent(self) -> Any: ...
    @overload
    def DeclareForcedUnrestrictedUpdateEvent(self, update: Callable[[Context_[Expression],State_[Expression]],Optional[EventStatus]]) -> None: ...
    @overload
    def DeclareForcedUnrestrictedUpdateEvent(self) -> Any: ...
    def DeclareInitializationDiscreteUpdateEvent(self, update: Callable[[Context_[Expression],DiscreteValues_[Expression]],Optional[EventStatus]]) -> None: ...
    def DeclareInitializationEvent(self, event: Event_[Expression]) -> None: ...
    def DeclareInitializationPublishEvent(self, publish: Callable[[Context_[Expression]],Optional[EventStatus]]) -> None: ...
    def DeclareInitializationUnrestrictedUpdateEvent(self, update: Callable[[Context_[Expression],State_[Expression]],Optional[EventStatus]]) -> None: ...
    def DeclareNumericParameter(self, model_vector: BasicVector_[Expression]) -> int: ...
    def DeclarePerStepDiscreteUpdateEvent(self, update: Callable[[Context_[Expression],DiscreteValues_[Expression]],Optional[EventStatus]]) -> None: ...
    def DeclarePerStepEvent(self, event: Event_[Expression]) -> None: ...
    def DeclarePerStepPublishEvent(self, publish: Callable[[Context_[Expression]],Optional[EventStatus]]) -> None: ...
    def DeclarePerStepUnrestrictedUpdateEvent(self, update: Callable[[Context_[Expression],State_[Expression]],Optional[EventStatus]]) -> None: ...
    def DeclarePeriodicDiscreteUpdate(self, period_sec: float, offset_sec: float = ...) -> None: ...
    def DeclarePeriodicDiscreteUpdateEvent(self, period_sec: float, offset_sec: float, update: Callable[[Context_[Expression],DiscreteValues_[Expression]],Optional[EventStatus]]) -> None: ...
    def DeclarePeriodicDiscreteUpdateNoHandler(self, period_sec: float, offset_sec: float = ...) -> None: ...
    def DeclarePeriodicEvent(self, period_sec: float, offset_sec: float, event: Event_[Expression]) -> None: ...
    def DeclarePeriodicPublish(self, period_sec: float, offset_sec: float = ...) -> None: ...
    def DeclarePeriodicPublishEvent(self, period_sec: float, offset_sec: float, publish: Callable[[Context_[Expression]],Optional[EventStatus]]) -> None: ...
    def DeclarePeriodicPublishNoHandler(self, period_sec: float, offset_sec: float = ...) -> None: ...
    def DeclarePeriodicUnrestrictedUpdateEvent(self, period_sec: float, offset_sec: float, update: Callable[[Context_[Expression],State_[Expression]],Optional[EventStatus]]) -> None: ...
    @overload
    def DeclareStateOutputPort(self, name: Union[str,UseDefaultName], state_index: ContinuousStateIndex) -> LeafOutputPort_[Expression]: ...
    @overload
    def DeclareStateOutputPort(self, name: Union[str,UseDefaultName], state_index: DiscreteStateIndex) -> LeafOutputPort_[Expression]: ...
    @overload
    def DeclareStateOutputPort(self, name: Union[str,UseDefaultName], state_index: AbstractStateIndex) -> LeafOutputPort_[Expression]: ...
    @overload
    def DeclareVectorInputPort(self, name: str, model_vector: BasicVector_[Expression], random_type: Optional[pydrake.common._module_py.RandomDistribution] = ...) -> InputPort_[Expression]: ...
    @overload
    def DeclareVectorInputPort(self, name: str, size: int, random_type: Optional[pydrake.common._module_py.RandomDistribution] = ...) -> InputPort_[Expression]: ...
    @overload
    def DeclareVectorOutputPort(self, name: str, model_value: BasicVector_[Expression], calc: Callable[[Context_[Expression],BasicVector_[Expression]],None], prerequisites_of_calc: Set[DependencyTicket] = ...) -> OutputPort_[Expression]: ...
    @overload
    def DeclareVectorOutputPort(self, name: str, size: int, calc: Callable[[Context_[Expression],BasicVector_[Expression]],None], prerequisites_of_calc: Set[DependencyTicket] = ...) -> OutputPort_[Expression]: ...
    def DoCalcDiscreteVariableUpdates(self, arg0: Context_[Expression], arg1: List[DiscreteUpdateEvent_[Expression]], arg2: DiscreteValues_[Expression]) -> None: ...
    def DoCalcTimeDerivatives(self, arg0: Context_[Expression], arg1: ContinuousState_[Expression]) -> None: ...
    def DoPublish(self, arg0: Context_[Expression], arg1: List[PublishEvent_[Expression]]) -> None: ...
    @overload
    def MakeWitnessFunction(self, description: str, direction_type: WitnessFunctionDirection, calc: Callable[[Context_[Expression]],pydrake.symbolic.Expression]) -> WitnessFunction_[Expression]: ...
    @overload
    def MakeWitnessFunction(self, description: str, direction_type: WitnessFunctionDirection, calc: Callable[[Context_[Expression]],pydrake.symbolic.Expression], e: Event_[Expression]) -> WitnessFunction_[Expression]: ...

class LeafSystem_[float](System_[float]):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, converter: SystemScalarConverter) -> None: ...
    def DeclareAbstractInputPort(self, name: str, model_value: pydrake.common.value.AbstractValue) -> InputPort_[float]: ...
    def DeclareAbstractOutputPort(self, name: str, alloc: Callable[[],pydrake.common.value.AbstractValue], calc: Callable[[Context_[float],pydrake.common.value.AbstractValue],None], prerequisites_of_calc: Set[DependencyTicket] = ...) -> OutputPort_[float]: ...
    def DeclareAbstractParameter(self, model_value: pydrake.common.value.AbstractValue) -> int: ...
    def DeclareAbstractState(self, model_value: pydrake.common.value.AbstractValue) -> AbstractStateIndex: ...
    @overload
    def DeclareContinuousState(self, num_state_variables: int) -> ContinuousStateIndex: ...
    @overload
    def DeclareContinuousState(self, num_q: int, num_v: int, num_z: int) -> ContinuousStateIndex: ...
    @overload
    def DeclareContinuousState(self, model_vector: BasicVector_[float]) -> ContinuousStateIndex: ...
    @overload
    def DeclareContinuousState(self, model_vector: BasicVector_[float], num_q: int, num_v: int, num_z: int) -> ContinuousStateIndex: ...
    @overload
    def DeclareDiscreteState(self, model_vector: BasicVector_[float]) -> DiscreteStateIndex: ...
    @overload
    def DeclareDiscreteState(self, vector: numpy.ndarray[numpy.float64[m,1]]) -> DiscreteStateIndex: ...
    @overload
    def DeclareDiscreteState(self, num_state_variables: int) -> DiscreteStateIndex: ...
    @overload
    def DeclareDiscreteState(self) -> Any: ...
    @overload
    def DeclareForcedDiscreteUpdateEvent(self, update: Callable[[Context_[float],DiscreteValues_[float]],Optional[EventStatus]]) -> None: ...
    @overload
    def DeclareForcedDiscreteUpdateEvent(self) -> Any: ...
    @overload
    def DeclareForcedPublishEvent(self, publish: Callable[[Context_[float]],Optional[EventStatus]]) -> None: ...
    @overload
    def DeclareForcedPublishEvent(self) -> Any: ...
    @overload
    def DeclareForcedUnrestrictedUpdateEvent(self, update: Callable[[Context_[float],State_[float]],Optional[EventStatus]]) -> None: ...
    @overload
    def DeclareForcedUnrestrictedUpdateEvent(self) -> Any: ...
    def DeclareInitializationDiscreteUpdateEvent(self, update: Callable[[Context_[float],DiscreteValues_[float]],Optional[EventStatus]]) -> None: ...
    def DeclareInitializationEvent(self, event: Event_[float]) -> None: ...
    def DeclareInitializationPublishEvent(self, publish: Callable[[Context_[float]],Optional[EventStatus]]) -> None: ...
    def DeclareInitializationUnrestrictedUpdateEvent(self, update: Callable[[Context_[float],State_[float]],Optional[EventStatus]]) -> None: ...
    def DeclareNumericParameter(self, model_vector: BasicVector_[float]) -> int: ...
    def DeclarePerStepDiscreteUpdateEvent(self, update: Callable[[Context_[float],DiscreteValues_[float]],Optional[EventStatus]]) -> None: ...
    def DeclarePerStepEvent(self, event: Event_[float]) -> None: ...
    def DeclarePerStepPublishEvent(self, publish: Callable[[Context_[float]],Optional[EventStatus]]) -> None: ...
    def DeclarePerStepUnrestrictedUpdateEvent(self, update: Callable[[Context_[float],State_[float]],Optional[EventStatus]]) -> None: ...
    def DeclarePeriodicDiscreteUpdate(self, period_sec: float, offset_sec: float = ...) -> None: ...
    def DeclarePeriodicDiscreteUpdateEvent(self, period_sec: float, offset_sec: float, update: Callable[[Context_[float],DiscreteValues_[float]],Optional[EventStatus]]) -> None: ...
    def DeclarePeriodicDiscreteUpdateNoHandler(self, period_sec: float, offset_sec: float = ...) -> None: ...
    def DeclarePeriodicEvent(self, period_sec: float, offset_sec: float, event: Event_[float]) -> None: ...
    def DeclarePeriodicPublish(self, period_sec: float, offset_sec: float = ...) -> None: ...
    def DeclarePeriodicPublishEvent(self, period_sec: float, offset_sec: float, publish: Callable[[Context_[float]],Optional[EventStatus]]) -> None: ...
    def DeclarePeriodicPublishNoHandler(self, period_sec: float, offset_sec: float = ...) -> None: ...
    def DeclarePeriodicUnrestrictedUpdateEvent(self, period_sec: float, offset_sec: float, update: Callable[[Context_[float],State_[float]],Optional[EventStatus]]) -> None: ...
    @overload
    def DeclareStateOutputPort(self, name: Union[str,UseDefaultName], state_index: ContinuousStateIndex) -> LeafOutputPort_[float]: ...
    @overload
    def DeclareStateOutputPort(self, name: Union[str,UseDefaultName], state_index: DiscreteStateIndex) -> LeafOutputPort_[float]: ...
    @overload
    def DeclareStateOutputPort(self, name: Union[str,UseDefaultName], state_index: AbstractStateIndex) -> LeafOutputPort_[float]: ...
    @overload
    def DeclareVectorInputPort(self, name: str, model_vector: BasicVector_[float], random_type: Optional[pydrake.common._module_py.RandomDistribution] = ...) -> InputPort_[float]: ...
    @overload
    def DeclareVectorInputPort(self, name: str, size: int, random_type: Optional[pydrake.common._module_py.RandomDistribution] = ...) -> InputPort_[float]: ...
    @overload
    def DeclareVectorOutputPort(self, name: str, model_value: BasicVector_[float], calc: Callable[[Context_[float],BasicVector_[float]],None], prerequisites_of_calc: Set[DependencyTicket] = ...) -> OutputPort_[float]: ...
    @overload
    def DeclareVectorOutputPort(self, name: str, size: int, calc: Callable[[Context_[float],BasicVector_[float]],None], prerequisites_of_calc: Set[DependencyTicket] = ...) -> OutputPort_[float]: ...
    def DoCalcDiscreteVariableUpdates(self, arg0: Context_[float], arg1: List[DiscreteUpdateEvent_[float]], arg2: DiscreteValues_[float]) -> None: ...
    def DoCalcTimeDerivatives(self, arg0: Context_[float], arg1: ContinuousState_[float]) -> None: ...
    def DoPublish(self, arg0: Context_[float], arg1: List[PublishEvent_[float]]) -> None: ...
    @overload
    def MakeWitnessFunction(self, description: str, direction_type: WitnessFunctionDirection, calc: Callable[[Context_[float]],float]) -> WitnessFunction_[float]: ...
    @overload
    def MakeWitnessFunction(self, description: str, direction_type: WitnessFunctionDirection, calc: Callable[[Context_[float]],float], e: Event_[float]) -> WitnessFunction_[float]: ...

class NumericParameterIndex:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: int) -> None: ...
    def is_valid(self) -> bool: ...
    @overload
    def __eq__(self, arg0: NumericParameterIndex) -> bool: ...
    @overload
    def __eq__(self, arg0: int) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __lt__(self, arg0: NumericParameterIndex) -> bool: ...

class OutputPort:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def Allocate(self) -> pydrake.common.value.AbstractValue: ...
    def Eval(self, arg0: Context_[float]) -> object: ...
    def EvalAbstract(self, context: Context_[float]) -> object: ...
    def EvalBasicVector(self, context: Context_[float]) -> object: ...
    def get_data_type(self) -> PortDataType: ...
    def get_index(self) -> OutputPortIndex: ...
    def get_name(self) -> str: ...
    def get_system(self, *args, **kwargs) -> Any: ...
    def size(self) -> int: ...

class OutputPortIndex:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: int) -> None: ...
    def is_valid(self) -> bool: ...
    @overload
    def __eq__(self, arg0: OutputPortIndex) -> bool: ...
    @overload
    def __eq__(self, arg0: int) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __lt__(self, arg0: OutputPortIndex) -> bool: ...

class OutputPortSelection:
    __members__: ClassVar[dict] = ...  # read-only
    __entries: ClassVar[dict] = ...
    _pybind11_del_orig: ClassVar[None] = ...
    kNoOutput: ClassVar[OutputPortSelection] = ...
    kUseFirstOutputIfItExists: ClassVar[OutputPortSelection] = ...
    def __init__(self, value: int) -> None: ...
    def __del__(self, *args, **kwargs) -> Any: ...
    def __eq__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    def __setstate__(self, state: int) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class OutputPort_[AutoDiffXd]:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def Allocate(self) -> pydrake.common.value.AbstractValue: ...
    def Eval(self, arg0: Context_[AutoDiffXd]) -> object: ...
    def EvalAbstract(self, context: Context_[AutoDiffXd]) -> object: ...
    def EvalBasicVector(self, context: Context_[AutoDiffXd]) -> object: ...
    def get_data_type(self) -> PortDataType: ...
    def get_index(self) -> OutputPortIndex: ...
    def get_name(self) -> str: ...
    def get_system(self, *args, **kwargs) -> Any: ...
    def size(self) -> int: ...

class OutputPort_[Expression]:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def Allocate(self) -> pydrake.common.value.AbstractValue: ...
    def Eval(self, arg0: Context_[Expression]) -> object: ...
    def EvalAbstract(self, context: Context_[Expression]) -> object: ...
    def EvalBasicVector(self, context: Context_[Expression]) -> object: ...
    def get_data_type(self) -> PortDataType: ...
    def get_index(self) -> OutputPortIndex: ...
    def get_name(self) -> str: ...
    def get_system(self, *args, **kwargs) -> Any: ...
    def size(self) -> int: ...

class OutputPort_[float]:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def Allocate(self) -> pydrake.common.value.AbstractValue: ...
    def Eval(self, arg0: Context_[float]) -> object: ...
    def EvalAbstract(self, context: Context_[float]) -> object: ...
    def EvalBasicVector(self, context: Context_[float]) -> object: ...
    def get_data_type(self) -> PortDataType: ...
    def get_index(self) -> OutputPortIndex: ...
    def get_name(self) -> str: ...
    def get_system(self, *args, **kwargs) -> Any: ...
    def size(self) -> int: ...

class Parameters:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, numeric: List[BasicVector_[float]], abstract: List[pydrake.common.value.AbstractValue]) -> None: ...
    @overload
    def __init__(self, numeric: List[BasicVector_[float]]) -> None: ...
    @overload
    def __init__(self, abstract: List[pydrake.common.value.AbstractValue]) -> None: ...
    @overload
    def __init__(self, vec: BasicVector_[float]) -> None: ...
    @overload
    def __init__(self, value: pydrake.common.value.AbstractValue) -> None: ...
    def Clone(self) -> Parameters_[float]: ...
    def SetFrom(self, arg0: Parameters_[float]) -> None: ...
    def get_abstract_parameter(self, index: int) -> pydrake.common.value.AbstractValue: ...
    def get_abstract_parameters(self) -> AbstractValues: ...
    def get_mutable_abstract_parameter(self, index: int) -> pydrake.common.value.AbstractValue: ...
    def get_mutable_numeric_parameter(self, index: int) -> BasicVector_[float]: ...
    def get_numeric_parameter(self, index: int) -> BasicVector_[float]: ...
    def get_numeric_parameters(self, *args, **kwargs) -> Any: ...
    def num_abstract_parameters(self) -> int: ...
    def num_numeric_parameter_groups(self) -> int: ...
    def set_abstract_parameters(self, abstract_params: AbstractValues) -> None: ...
    def set_numeric_parameters(self, numeric_params) -> None: ...
    def __copy__(self) -> Parameters_[float]: ...
    def __deepcopy__(self, arg0: dict) -> Parameters_[float]: ...

class Parameters_[AutoDiffXd]:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, numeric: List[BasicVector_[AutoDiffXd]], abstract: List[pydrake.common.value.AbstractValue]) -> None: ...
    @overload
    def __init__(self, numeric: List[BasicVector_[AutoDiffXd]]) -> None: ...
    @overload
    def __init__(self, abstract: List[pydrake.common.value.AbstractValue]) -> None: ...
    @overload
    def __init__(self, vec: BasicVector_[AutoDiffXd]) -> None: ...
    @overload
    def __init__(self, value: pydrake.common.value.AbstractValue) -> None: ...
    def Clone(self) -> Parameters_[AutoDiffXd]: ...
    def SetFrom(self, arg0: Parameters_[float]) -> None: ...
    def get_abstract_parameter(self, index: int) -> pydrake.common.value.AbstractValue: ...
    def get_abstract_parameters(self) -> AbstractValues: ...
    def get_mutable_abstract_parameter(self, index: int) -> pydrake.common.value.AbstractValue: ...
    def get_mutable_numeric_parameter(self, index: int) -> BasicVector_[AutoDiffXd]: ...
    def get_numeric_parameter(self, index: int) -> BasicVector_[AutoDiffXd]: ...
    def get_numeric_parameters(self, *args, **kwargs) -> Any: ...
    def num_abstract_parameters(self) -> int: ...
    def num_numeric_parameter_groups(self) -> int: ...
    def set_abstract_parameters(self, abstract_params: AbstractValues) -> None: ...
    def set_numeric_parameters(self, *args, **kwargs) -> Any: ...
    def __copy__(self) -> Parameters_[AutoDiffXd]: ...
    def __deepcopy__(self, arg0: dict) -> Parameters_[AutoDiffXd]: ...

class Parameters_[Expression]:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, numeric: List[BasicVector_[Expression]], abstract: List[pydrake.common.value.AbstractValue]) -> None: ...
    @overload
    def __init__(self, numeric: List[BasicVector_[Expression]]) -> None: ...
    @overload
    def __init__(self, abstract: List[pydrake.common.value.AbstractValue]) -> None: ...
    @overload
    def __init__(self, vec: BasicVector_[Expression]) -> None: ...
    @overload
    def __init__(self, value: pydrake.common.value.AbstractValue) -> None: ...
    def Clone(self) -> Parameters_[Expression]: ...
    def SetFrom(self, arg0: Parameters_[float]) -> None: ...
    def get_abstract_parameter(self, index: int) -> pydrake.common.value.AbstractValue: ...
    def get_abstract_parameters(self) -> AbstractValues: ...
    def get_mutable_abstract_parameter(self, index: int) -> pydrake.common.value.AbstractValue: ...
    def get_mutable_numeric_parameter(self, index: int) -> BasicVector_[Expression]: ...
    def get_numeric_parameter(self, index: int) -> BasicVector_[Expression]: ...
    def get_numeric_parameters(self, *args, **kwargs) -> Any: ...
    def num_abstract_parameters(self) -> int: ...
    def num_numeric_parameter_groups(self) -> int: ...
    def set_abstract_parameters(self, abstract_params: AbstractValues) -> None: ...
    def set_numeric_parameters(self, numeric_params) -> None: ...
    def __copy__(self) -> Parameters_[Expression]: ...
    def __deepcopy__(self, arg0: dict) -> Parameters_[Expression]: ...

class Parameters_[float]:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, numeric: List[BasicVector_[float]], abstract: List[pydrake.common.value.AbstractValue]) -> None: ...
    @overload
    def __init__(self, numeric: List[BasicVector_[float]]) -> None: ...
    @overload
    def __init__(self, abstract: List[pydrake.common.value.AbstractValue]) -> None: ...
    @overload
    def __init__(self, vec: BasicVector_[float]) -> None: ...
    @overload
    def __init__(self, value: pydrake.common.value.AbstractValue) -> None: ...
    def Clone(self) -> Parameters_[float]: ...
    def SetFrom(self, arg0: Parameters_[float]) -> None: ...
    def get_abstract_parameter(self, index: int) -> pydrake.common.value.AbstractValue: ...
    def get_abstract_parameters(self) -> AbstractValues: ...
    def get_mutable_abstract_parameter(self, index: int) -> pydrake.common.value.AbstractValue: ...
    def get_mutable_numeric_parameter(self, index: int) -> BasicVector_[float]: ...
    def get_numeric_parameter(self, index: int) -> BasicVector_[float]: ...
    def get_numeric_parameters(self, *args, **kwargs) -> Any: ...
    def num_abstract_parameters(self) -> int: ...
    def num_numeric_parameter_groups(self) -> int: ...
    def set_abstract_parameters(self, abstract_params: AbstractValues) -> None: ...
    def set_numeric_parameters(self, numeric_params) -> None: ...
    def __copy__(self) -> Parameters_[float]: ...
    def __deepcopy__(self, arg0: dict) -> Parameters_[float]: ...

class PeriodicEventData:
    def __init__(self, *args, **kwargs) -> None: ...
    def offset_sec(self) -> float: ...
    def period_sec(self) -> float: ...
    def __copy__(self) -> PeriodicEventData: ...
    def __deepcopy__(self, arg0: dict) -> PeriodicEventData: ...

class PortDataType:
    __members__: ClassVar[dict] = ...  # read-only
    __entries: ClassVar[dict] = ...
    _pybind11_del_orig: ClassVar[None] = ...
    kAbstractValued: ClassVar[PortDataType] = ...
    kVectorValued: ClassVar[PortDataType] = ...
    def __init__(self, value: int) -> None: ...
    def __del__(self, *args, **kwargs) -> Any: ...
    def __eq__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    def __setstate__(self, state: int) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class PublishEvent(Event_[float]):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, callback: Callable[[Context_[float],PublishEvent_[float]],None]) -> None: ...
    @overload
    def __init__(self, system_callback) -> None: ...
    @overload
    def __init__(self, trigger_type: TriggerType, callback: Callable[[Context_[float],PublishEvent_[float]],None]) -> None: ...
    @overload
    def __init__(self, trigger_type: TriggerType, system_callback) -> None: ...

class PublishEvent_[AutoDiffXd](Event_[AutoDiffXd]):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, callback: Callable[[Context_[AutoDiffXd],PublishEvent_[AutoDiffXd]],None]) -> None: ...
    @overload
    def __init__(self, system_callback) -> None: ...
    @overload
    def __init__(self, trigger_type: TriggerType, callback: Callable[[Context_[AutoDiffXd],PublishEvent_[AutoDiffXd]],None]) -> None: ...
    @overload
    def __init__(self, trigger_type: TriggerType, system_callback) -> None: ...

class PublishEvent_[Expression](Event_[Expression]):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, callback: Callable[[Context_[Expression],PublishEvent_[Expression]],None]) -> None: ...
    @overload
    def __init__(self, system_callback) -> None: ...
    @overload
    def __init__(self, trigger_type: TriggerType, callback: Callable[[Context_[Expression],PublishEvent_[Expression]],None]) -> None: ...
    @overload
    def __init__(self, trigger_type: TriggerType, system_callback) -> None: ...

class PublishEvent_[float](Event_[float]):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, callback: Callable[[Context_[float],PublishEvent_[float]],None]) -> None: ...
    @overload
    def __init__(self, system_callback) -> None: ...
    @overload
    def __init__(self, trigger_type: TriggerType, callback: Callable[[Context_[float],PublishEvent_[float]],None]) -> None: ...
    @overload
    def __init__(self, trigger_type: TriggerType, system_callback) -> None: ...

class State:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self) -> None: ...
    @overload
    def get_abstract_state(self) -> AbstractValues: ...
    @overload
    def get_abstract_state(self, index: int) -> pydrake.common.value.AbstractValue: ...
    def get_continuous_state(self, *args, **kwargs) -> Any: ...
    def get_discrete_state(self, *args, **kwargs) -> Any: ...
    @overload
    def get_mutable_abstract_state(self) -> AbstractValues: ...
    @overload
    def get_mutable_abstract_state(self, index: int) -> pydrake.common.value.AbstractValue: ...
    def get_mutable_continuous_state(self, *args, **kwargs) -> Any: ...
    def get_mutable_discrete_state(self, index: int) -> BasicVector_[float]: ...

class State_[AutoDiffXd]:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self) -> None: ...
    @overload
    def get_abstract_state(self) -> AbstractValues: ...
    @overload
    def get_abstract_state(self, index: int) -> pydrake.common.value.AbstractValue: ...
    def get_continuous_state(self, *args, **kwargs) -> Any: ...
    def get_discrete_state(self, *args, **kwargs) -> Any: ...
    @overload
    def get_mutable_abstract_state(self) -> AbstractValues: ...
    @overload
    def get_mutable_abstract_state(self, index: int) -> pydrake.common.value.AbstractValue: ...
    def get_mutable_continuous_state(self, *args, **kwargs) -> Any: ...
    def get_mutable_discrete_state(self, index: int) -> BasicVector_[AutoDiffXd]: ...

class State_[Expression]:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self) -> None: ...
    @overload
    def get_abstract_state(self) -> AbstractValues: ...
    @overload
    def get_abstract_state(self, index: int) -> pydrake.common.value.AbstractValue: ...
    def get_continuous_state(self, *args, **kwargs) -> Any: ...
    def get_discrete_state(self, *args, **kwargs) -> Any: ...
    @overload
    def get_mutable_abstract_state(self) -> AbstractValues: ...
    @overload
    def get_mutable_abstract_state(self, index: int) -> pydrake.common.value.AbstractValue: ...
    def get_mutable_continuous_state(self, *args, **kwargs) -> Any: ...
    def get_mutable_discrete_state(self, index: int) -> BasicVector_[Expression]: ...

class State_[float]:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self) -> None: ...
    @overload
    def get_abstract_state(self) -> AbstractValues: ...
    @overload
    def get_abstract_state(self, index: int) -> pydrake.common.value.AbstractValue: ...
    def get_continuous_state(self, *args, **kwargs) -> Any: ...
    def get_discrete_state(self, *args, **kwargs) -> Any: ...
    @overload
    def get_mutable_abstract_state(self) -> AbstractValues: ...
    @overload
    def get_mutable_abstract_state(self, index: int) -> pydrake.common.value.AbstractValue: ...
    def get_mutable_continuous_state(self, *args, **kwargs) -> Any: ...
    def get_mutable_discrete_state(self, index: int) -> BasicVector_[float]: ...

class SubsystemIndex:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: int) -> None: ...
    def is_valid(self) -> bool: ...
    @overload
    def __eq__(self, arg0: SubsystemIndex) -> bool: ...
    @overload
    def __eq__(self, arg0: int) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __lt__(self, arg0: SubsystemIndex) -> bool: ...

class Subvector(VectorBase_[float]):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class Subvector_[AutoDiffXd](VectorBase_[AutoDiffXd]):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class Subvector_[Expression](VectorBase_[Expression]):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class Subvector_[float](VectorBase_[float]):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class Supervector(VectorBase_[float]):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class Supervector_[AutoDiffXd](VectorBase_[AutoDiffXd]):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class Supervector_[Expression](VectorBase_[Expression]):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class Supervector_[float](VectorBase_[float]):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class System(SystemBase):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    ToScalarType: Any
    ToScalarTypeMaybe: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def Accept(self, v) -> None: ...
    def AllocateContext(self) -> Context_[float]: ...
    def AllocateDiscreteVariables(self) -> DiscreteValues_[float]: ...
    def AllocateImplicitTimeDerivativesResidual(self) -> numpy.ndarray[numpy.float64[m,1]]: ...
    def AllocateInputAbstract(self, input_port: InputPort_[float]) -> pydrake.common.value.AbstractValue: ...
    def AllocateInputVector(self, input_port: InputPort_[float]) -> BasicVector_[float]: ...
    def AllocateOutput(self) -> SystemOutput_[float]: ...
    def AllocateTimeDerivatives(self) -> ContinuousState_[float]: ...
    def CalcConservativePower(self, context: Context_[float]) -> float: ...
    def CalcDiscreteVariableUpdates(self, context: Context_[float], discrete_state: DiscreteValues_[float]) -> None: ...
    def CalcForcedDiscreteVariableUpdate(self, context: Context_[float], discrete_state: DiscreteValues_[float]) -> None: ...
    def CalcForcedUnrestrictedUpdate(self, context: Context_[float], state: State_[float]) -> None: ...
    @overload
    def CalcImplicitTimeDerivativesResidual(self, context: Context_[float], proposed_derivatives: ContinuousState_[float], residual: Optional[numpy.ndarray[numpy.float64[m,1],flags.writeable]]) -> None: ...
    @overload
    def CalcImplicitTimeDerivativesResidual(self, context: Context_[float], proposed_derivatives: ContinuousState_[float]) -> numpy.ndarray[numpy.float64[m,1]]: ...
    def CalcKineticEnergy(self, context: Context_[float]) -> float: ...
    def CalcNonConservativePower(self, context: Context_[float]) -> float: ...
    def CalcOutput(self, context: Context_[float], outputs: SystemOutput_[float]) -> None: ...
    def CalcPotentialEnergy(self, context: Context_[float]) -> float: ...
    def CalcTimeDerivatives(self, context: Context_[float], derivatives: ContinuousState_[float]) -> None: ...
    def CalcUnrestrictedUpdate(self, context: Context_[float], state: State_[float]) -> None: ...
    def CreateDefaultContext(self) -> Context_[float]: ...
    def DeclareInputPort(self, name: Union[str,UseDefaultName], type: PortDataType, size: int, random_type: Optional[pydrake.common._module_py.RandomDistribution] = ...) -> InputPort_[float]: ...
    def EvalAbstractInput(self, arg0: Context_[float], arg1: int) -> pydrake.common.value.AbstractValue: ...
    def EvalKineticEnergy(self, context: Context_[float]) -> float: ...
    def EvalPotentialEnergy(self, context: Context_[float]) -> float: ...
    def EvalTimeDerivatives(self, arg0: Context_[float]) -> ContinuousState_[float]: ...
    @overload
    def EvalUniquePeriodicDiscreteUpdate(self, context: Context_[float]) -> DiscreteValues_[float]: ...
    @overload
    def EvalUniquePeriodicDiscreteUpdate(self, context) -> Any: ...
    @overload
    def EvalUniquePeriodicDiscreteUpdate(self) -> Any: ...
    def EvalVectorInput(self, arg0: Context_[float], arg1: int) -> BasicVector_[float]: ...
    def FixInputPortsFrom(self, other_system: System_[float], other_context: Context_[float], target_context: Context_[float]) -> None: ...
    def ForcedPublish(self, context: Context_[float]) -> None: ...
    def GetGraphvizString(self, max_depth: int = ...) -> object: ...
    def GetInputPort(self, port_name: str) -> InputPort_[float]: ...
    def GetMutableSubsystemContext(self, arg0: System_[float], arg1: Context_[float]) -> Context_[float]: ...
    @overload
    def GetMyContextFromRoot(self, arg0: Context_[float]) -> Context_[float]: ...
    @overload
    def GetMyContextFromRoot(self) -> Any: ...
    def GetMyMutableContextFromRoot(self, arg0: Context_[float]) -> Context_[float]: ...
    def GetOutputPort(self, port_name: str) -> OutputPort_[float]: ...
    def GetSubsystemContext(self, arg0: System_[float], arg1: Context_[float]) -> Context_[float]: ...
    def GetUniquePeriodicDiscreteUpdateAttribute(self) -> Optional[PeriodicEventData]: ...
    @overload
    def GetWitnessFunctions(self, context: Context_[float]) -> List[WitnessFunction_[float]]: ...
    @overload
    def GetWitnessFunctions(self, context) -> Any: ...
    def HasAnyDirectFeedthrough(self) -> bool: ...
    @overload
    def HasDirectFeedthrough(self, output_port: int) -> bool: ...
    @overload
    def HasDirectFeedthrough(self, input_port: int, output_port: int) -> bool: ...
    @overload
    def IsDifferenceEquationSystem(self) -> Tuple[bool,float]: ...
    @overload
    def IsDifferenceEquationSystem(self) -> Any: ...
    def Publish(self, arg0: Context_[float]) -> None: ...
    def SetDefaultContext(self, arg0: Context_[float]) -> None: ...
    def SetRandomContext(self, context: Context_[float], generator: pydrake.common._module_py.RandomGenerator) -> None: ...
    def ToAutoDiffXd(self, *args, **kwargs) -> Any: ...
    def ToAutoDiffXdMaybe(self, *args, **kwargs) -> Any: ...
    def ToScalarTypeMaybe[AutoDiffXd](self, *args, **kwargs) -> Any: ...
    def ToScalarTypeMaybe[Expression](self, *args, **kwargs) -> Any: ...
    def ToScalarTypeMaybe[float](self, *args, **kwargs) -> Any: ...
    def ToScalarType[AutoDiffXd](self, *args, **kwargs) -> Any: ...
    def ToScalarType[Expression](self, *args, **kwargs) -> Any: ...
    def ToScalarType[float](self, *args, **kwargs) -> Any: ...
    def ToSymbolic(self, *args, **kwargs) -> Any: ...
    def ToSymbolicMaybe(self, *args, **kwargs) -> Any: ...
    @overload
    def get_input_port(self, port_index: int) -> InputPort_[float]: ...
    @overload
    def get_input_port(self) -> InputPort_[float]: ...
    @overload
    def get_output_port(self, port_index: int) -> OutputPort_[float]: ...
    @overload
    def get_output_port(self) -> OutputPort_[float]: ...

class SystemBase:
    def __init__(self, *args, **kwargs) -> None: ...
    def DeclareCacheEntry(self, description: str, value_producer: ValueProducer, prerequisites_of_calc: Set[DependencyTicket] = ...) -> CacheEntry: ...
    def GetSystemName(self) -> str: ...
    def GetSystemPathname(self) -> str: ...
    def GetSystemType(self) -> str: ...
    def abstract_parameter_ticket(self, index: AbstractParameterIndex) -> DependencyTicket: ...
    def abstract_state_ticket(self, index: AbstractStateIndex) -> DependencyTicket: ...
    def accuracy_ticket(self, *args, **kwargs) -> Any: ...
    def all_input_ports_ticket(self, *args, **kwargs) -> Any: ...
    def all_parameters_ticket(self, *args, **kwargs) -> Any: ...
    def all_sources_except_input_ports_ticket(self, *args, **kwargs) -> Any: ...
    def all_sources_ticket(self, *args, **kwargs) -> Any: ...
    def all_state_ticket(self, *args, **kwargs) -> Any: ...
    def cache_entry_ticket(self, index: CacheIndex) -> DependencyTicket: ...
    def configuration_ticket(self, *args, **kwargs) -> Any: ...
    def discrete_state_ticket(self, index: DiscreteStateIndex) -> DependencyTicket: ...
    def get_cache_entry(self, index: CacheIndex) -> CacheEntry: ...
    def get_name(self) -> str: ...
    def implicit_time_derivatives_residual_size(self) -> int: ...
    def input_port_ticket(self, index: InputPortIndex) -> DependencyTicket: ...
    def ke_ticket(self, *args, **kwargs) -> Any: ...
    def kinematics_ticket(self, *args, **kwargs) -> Any: ...
    def nothing_ticket(self, *args, **kwargs) -> Any: ...
    def num_abstract_parameters(self) -> int: ...
    def num_abstract_states(self) -> int: ...
    def num_continuous_states(self) -> int: ...
    def num_discrete_state_groups(self) -> int: ...
    @overload
    def num_input_ports(self) -> int: ...
    @overload
    def num_input_ports(self) -> Any: ...
    def num_numeric_parameter_groups(self) -> int: ...
    @overload
    def num_output_ports(self) -> int: ...
    @overload
    def num_output_ports(self) -> Any: ...
    def numeric_parameter_ticket(self, index: NumericParameterIndex) -> DependencyTicket: ...
    def pa_ticket(self, *args, **kwargs) -> Any: ...
    def pc_ticket(self, *args, **kwargs) -> Any: ...
    def pe_ticket(self, *args, **kwargs) -> Any: ...
    def pn_ticket(self, *args, **kwargs) -> Any: ...
    def pnc_ticket(self, *args, **kwargs) -> Any: ...
    def q_ticket(self, *args, **kwargs) -> Any: ...
    def set_name(self, name: str) -> None: ...
    def time_ticket(self, *args, **kwargs) -> Any: ...
    def v_ticket(self, *args, **kwargs) -> Any: ...
    def xa_ticket(self, *args, **kwargs) -> Any: ...
    def xc_ticket(self, *args, **kwargs) -> Any: ...
    def xcdot_ticket(self, *args, **kwargs) -> Any: ...
    def xd_ticket(self, *args, **kwargs) -> Any: ...
    def z_ticket(self, *args, **kwargs) -> Any: ...

class SystemOutput:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def get_data(self, arg0: int) -> pydrake.common.value.AbstractValue: ...
    def get_vector_data(self, arg0: int) -> BasicVector_[float]: ...
    def num_ports(self) -> int: ...

class SystemOutput_[AutoDiffXd]:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def get_data(self, arg0: int) -> pydrake.common.value.AbstractValue: ...
    def get_vector_data(self, arg0: int) -> BasicVector_[AutoDiffXd]: ...
    def num_ports(self) -> int: ...

class SystemOutput_[Expression]:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def get_data(self, arg0: int) -> pydrake.common.value.AbstractValue: ...
    def get_vector_data(self, arg0: int) -> BasicVector_[Expression]: ...
    def num_ports(self) -> int: ...

class SystemOutput_[float]:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def get_data(self, arg0: int) -> pydrake.common.value.AbstractValue: ...
    def get_vector_data(self, arg0: int) -> BasicVector_[float]: ...
    def num_ports(self) -> int: ...

class SystemScalarConverter:
    SupportedConversionPairs: ClassVar[tuple] = ...
    SupportedScalars: ClassVar[tuple] = ...
    IsConvertible: Any
    _Add: Any
    def __init__(self) -> None: ...
    def IsConvertible[AutoDiffXd, Expression](self, *args, **kwargs) -> Any: ...
    def IsConvertible[AutoDiffXd, float](self, *args, **kwargs) -> Any: ...
    def IsConvertible[Expression, AutoDiffXd](self, *args, **kwargs) -> Any: ...
    def IsConvertible[Expression, float](self, *args, **kwargs) -> Any: ...
    def IsConvertible[float, AutoDiffXd](self, *args, **kwargs) -> Any: ...
    def IsConvertible[float, Expression](self, *args, **kwargs) -> Any: ...
    def _Add[AutoDiffXd, Expression](self, *args, **kwargs) -> Any: ...
    def _Add[AutoDiffXd, float](self, *args, **kwargs) -> Any: ...
    def _Add[Expression, AutoDiffXd](self, *args, **kwargs) -> Any: ...
    def _Add[Expression, float](self, *args, **kwargs) -> Any: ...
    def _Add[float, AutoDiffXd](self, *args, **kwargs) -> Any: ...
    def _Add[float, Expression](self, *args, **kwargs) -> Any: ...
    def __copy__(self) -> SystemScalarConverter: ...

class SystemVisitor:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self) -> None: ...
    def VisitDiagram(self, diagram: Diagram_[float]) -> None: ...
    def VisitSystem(self, system: System_[float]) -> None: ...

class SystemVisitor_[AutoDiffXd]:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self) -> None: ...
    def VisitDiagram(self, diagram: Diagram_[AutoDiffXd]) -> None: ...
    def VisitSystem(self, system: System_[AutoDiffXd]) -> None: ...

class SystemVisitor_[Expression]:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self) -> None: ...
    def VisitDiagram(self, diagram: Diagram_[Expression]) -> None: ...
    def VisitSystem(self, system: System_[Expression]) -> None: ...

class SystemVisitor_[float]:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self) -> None: ...
    def VisitDiagram(self, diagram: Diagram_[float]) -> None: ...
    def VisitSystem(self, system: System_[float]) -> None: ...

class System_[AutoDiffXd](SystemBase):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    ToScalarType: Any
    ToScalarTypeMaybe: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def Accept(self, *args, **kwargs) -> Any: ...
    def AllocateContext(self) -> Context_[AutoDiffXd]: ...
    def AllocateDiscreteVariables(self) -> DiscreteValues_[AutoDiffXd]: ...
    def AllocateImplicitTimeDerivativesResidual(self) -> numpy.ndarray[object[m,1]]: ...
    def AllocateInputAbstract(self, input_port: InputPort_[AutoDiffXd]) -> pydrake.common.value.AbstractValue: ...
    def AllocateInputVector(self, input_port: InputPort_[AutoDiffXd]) -> BasicVector_[AutoDiffXd]: ...
    def AllocateOutput(self) -> SystemOutput_[AutoDiffXd]: ...
    def AllocateTimeDerivatives(self) -> ContinuousState_[AutoDiffXd]: ...
    def CalcConservativePower(self, context: Context_[AutoDiffXd]) -> pydrake.autodiffutils.AutoDiffXd: ...
    def CalcDiscreteVariableUpdates(self, context: Context_[AutoDiffXd], discrete_state: DiscreteValues_[AutoDiffXd]) -> None: ...
    def CalcForcedDiscreteVariableUpdate(self, context: Context_[AutoDiffXd], discrete_state: DiscreteValues_[AutoDiffXd]) -> None: ...
    def CalcForcedUnrestrictedUpdate(self, context: Context_[AutoDiffXd], state: State_[AutoDiffXd]) -> None: ...
    @overload
    def CalcImplicitTimeDerivativesResidual(self, context: Context_[AutoDiffXd], proposed_derivatives: ContinuousState_[AutoDiffXd], residual: Optional[numpy.ndarray[object[m,1],flags.writeable]]) -> None: ...
    @overload
    def CalcImplicitTimeDerivativesResidual(self, context: Context_[AutoDiffXd], proposed_derivatives: ContinuousState_[AutoDiffXd]) -> numpy.ndarray[object[m,1]]: ...
    def CalcKineticEnergy(self, context: Context_[AutoDiffXd]) -> pydrake.autodiffutils.AutoDiffXd: ...
    def CalcNonConservativePower(self, context: Context_[AutoDiffXd]) -> pydrake.autodiffutils.AutoDiffXd: ...
    def CalcOutput(self, context: Context_[AutoDiffXd], outputs: SystemOutput_[AutoDiffXd]) -> None: ...
    def CalcPotentialEnergy(self, context: Context_[AutoDiffXd]) -> pydrake.autodiffutils.AutoDiffXd: ...
    def CalcTimeDerivatives(self, context: Context_[AutoDiffXd], derivatives: ContinuousState_[AutoDiffXd]) -> None: ...
    def CalcUnrestrictedUpdate(self, context: Context_[AutoDiffXd], state: State_[AutoDiffXd]) -> None: ...
    def CreateDefaultContext(self) -> Context_[AutoDiffXd]: ...
    def DeclareInputPort(self, name: Union[str,UseDefaultName], type: PortDataType, size: int, random_type: Optional[pydrake.common._module_py.RandomDistribution] = ...) -> InputPort_[AutoDiffXd]: ...
    def EvalAbstractInput(self, arg0: Context_[AutoDiffXd], arg1: int) -> pydrake.common.value.AbstractValue: ...
    def EvalKineticEnergy(self, context: Context_[AutoDiffXd]) -> pydrake.autodiffutils.AutoDiffXd: ...
    def EvalPotentialEnergy(self, context: Context_[AutoDiffXd]) -> pydrake.autodiffutils.AutoDiffXd: ...
    def EvalTimeDerivatives(self, arg0: Context_[AutoDiffXd]) -> ContinuousState_[AutoDiffXd]: ...
    @overload
    def EvalUniquePeriodicDiscreteUpdate(self, context: Context_[AutoDiffXd]) -> DiscreteValues_[AutoDiffXd]: ...
    @overload
    def EvalUniquePeriodicDiscreteUpdate(self, context) -> Any: ...
    @overload
    def EvalUniquePeriodicDiscreteUpdate(self) -> Any: ...
    def EvalVectorInput(self, arg0: Context_[AutoDiffXd], arg1: int) -> BasicVector_[AutoDiffXd]: ...
    def FixInputPortsFrom(self, other_system: System_[float], other_context: Context_[float], target_context: Context_[AutoDiffXd]) -> None: ...
    def ForcedPublish(self, context: Context_[AutoDiffXd]) -> None: ...
    def GetGraphvizString(self, max_depth: int = ...) -> object: ...
    def GetInputPort(self, port_name: str) -> InputPort_[AutoDiffXd]: ...
    def GetMutableSubsystemContext(self, arg0: System_[AutoDiffXd], arg1: Context_[AutoDiffXd]) -> Context_[AutoDiffXd]: ...
    @overload
    def GetMyContextFromRoot(self, arg0: Context_[AutoDiffXd]) -> Context_[AutoDiffXd]: ...
    @overload
    def GetMyContextFromRoot(self) -> Any: ...
    def GetMyMutableContextFromRoot(self, arg0: Context_[AutoDiffXd]) -> Context_[AutoDiffXd]: ...
    def GetOutputPort(self, port_name: str) -> OutputPort_[AutoDiffXd]: ...
    def GetSubsystemContext(self, arg0: System_[AutoDiffXd], arg1: Context_[AutoDiffXd]) -> Context_[AutoDiffXd]: ...
    def GetUniquePeriodicDiscreteUpdateAttribute(self) -> Optional[PeriodicEventData]: ...
    @overload
    def GetWitnessFunctions(self, context: Context_[AutoDiffXd]) -> List[WitnessFunction_[AutoDiffXd]]: ...
    @overload
    def GetWitnessFunctions(self, context) -> Any: ...
    def HasAnyDirectFeedthrough(self) -> bool: ...
    @overload
    def HasDirectFeedthrough(self, output_port: int) -> bool: ...
    @overload
    def HasDirectFeedthrough(self, input_port: int, output_port: int) -> bool: ...
    @overload
    def IsDifferenceEquationSystem(self) -> Tuple[bool,float]: ...
    @overload
    def IsDifferenceEquationSystem(self) -> Any: ...
    def Publish(self, arg0: Context_[AutoDiffXd]) -> None: ...
    def SetDefaultContext(self, arg0: Context_[AutoDiffXd]) -> None: ...
    def SetRandomContext(self, context: Context_[AutoDiffXd], generator: pydrake.common._module_py.RandomGenerator) -> None: ...
    def ToAutoDiffXd(self) -> System_[AutoDiffXd]: ...
    def ToAutoDiffXdMaybe(self) -> System_[AutoDiffXd]: ...
    def ToScalarTypeMaybe[AutoDiffXd](self, *args, **kwargs) -> Any: ...
    def ToScalarTypeMaybe[Expression](self, *args, **kwargs) -> Any: ...
    def ToScalarTypeMaybe[float](self, *args, **kwargs) -> Any: ...
    def ToScalarType[AutoDiffXd](self, *args, **kwargs) -> Any: ...
    def ToScalarType[Expression](self, *args, **kwargs) -> Any: ...
    def ToScalarType[float](self, *args, **kwargs) -> Any: ...
    def ToSymbolic(self, *args, **kwargs) -> Any: ...
    def ToSymbolicMaybe(self, *args, **kwargs) -> Any: ...
    @overload
    def get_input_port(self, port_index: int) -> InputPort_[AutoDiffXd]: ...
    @overload
    def get_input_port(self) -> InputPort_[AutoDiffXd]: ...
    @overload
    def get_output_port(self, port_index: int) -> OutputPort_[AutoDiffXd]: ...
    @overload
    def get_output_port(self) -> OutputPort_[AutoDiffXd]: ...

class System_[Expression](SystemBase):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    ToScalarType: Any
    ToScalarTypeMaybe: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def Accept(self, v) -> None: ...
    def AllocateContext(self) -> Context_[Expression]: ...
    def AllocateDiscreteVariables(self) -> DiscreteValues_[Expression]: ...
    def AllocateImplicitTimeDerivativesResidual(self) -> numpy.ndarray[object[m,1]]: ...
    def AllocateInputAbstract(self, input_port: InputPort_[Expression]) -> pydrake.common.value.AbstractValue: ...
    def AllocateInputVector(self, input_port: InputPort_[Expression]) -> BasicVector_[Expression]: ...
    def AllocateOutput(self) -> SystemOutput_[Expression]: ...
    def AllocateTimeDerivatives(self) -> ContinuousState_[Expression]: ...
    def CalcConservativePower(self, context: Context_[Expression]) -> pydrake.symbolic.Expression: ...
    def CalcDiscreteVariableUpdates(self, context: Context_[Expression], discrete_state: DiscreteValues_[Expression]) -> None: ...
    def CalcForcedDiscreteVariableUpdate(self, context: Context_[Expression], discrete_state: DiscreteValues_[Expression]) -> None: ...
    def CalcForcedUnrestrictedUpdate(self, context: Context_[Expression], state: State_[Expression]) -> None: ...
    @overload
    def CalcImplicitTimeDerivativesResidual(self, context: Context_[Expression], proposed_derivatives: ContinuousState_[Expression], residual: Optional[numpy.ndarray[object[m,1],flags.writeable]]) -> None: ...
    @overload
    def CalcImplicitTimeDerivativesResidual(self, context: Context_[Expression], proposed_derivatives: ContinuousState_[Expression]) -> numpy.ndarray[object[m,1]]: ...
    def CalcKineticEnergy(self, context: Context_[Expression]) -> pydrake.symbolic.Expression: ...
    def CalcNonConservativePower(self, context: Context_[Expression]) -> pydrake.symbolic.Expression: ...
    def CalcOutput(self, context: Context_[Expression], outputs: SystemOutput_[Expression]) -> None: ...
    def CalcPotentialEnergy(self, context: Context_[Expression]) -> pydrake.symbolic.Expression: ...
    def CalcTimeDerivatives(self, context: Context_[Expression], derivatives: ContinuousState_[Expression]) -> None: ...
    def CalcUnrestrictedUpdate(self, context: Context_[Expression], state: State_[Expression]) -> None: ...
    def CreateDefaultContext(self) -> Context_[Expression]: ...
    def DeclareInputPort(self, name: Union[str,UseDefaultName], type: PortDataType, size: int, random_type: Optional[pydrake.common._module_py.RandomDistribution] = ...) -> InputPort_[Expression]: ...
    def EvalAbstractInput(self, arg0: Context_[Expression], arg1: int) -> pydrake.common.value.AbstractValue: ...
    def EvalKineticEnergy(self, context: Context_[Expression]) -> pydrake.symbolic.Expression: ...
    def EvalPotentialEnergy(self, context: Context_[Expression]) -> pydrake.symbolic.Expression: ...
    def EvalTimeDerivatives(self, arg0: Context_[Expression]) -> ContinuousState_[Expression]: ...
    @overload
    def EvalUniquePeriodicDiscreteUpdate(self, context: Context_[Expression]) -> DiscreteValues_[Expression]: ...
    @overload
    def EvalUniquePeriodicDiscreteUpdate(self, context) -> Any: ...
    @overload
    def EvalUniquePeriodicDiscreteUpdate(self) -> Any: ...
    def EvalVectorInput(self, arg0: Context_[Expression], arg1: int) -> BasicVector_[Expression]: ...
    def FixInputPortsFrom(self, other_system: System_[float], other_context: Context_[float], target_context: Context_[Expression]) -> None: ...
    def ForcedPublish(self, context: Context_[Expression]) -> None: ...
    def GetGraphvizString(self, max_depth: int = ...) -> object: ...
    def GetInputPort(self, port_name: str) -> InputPort_[Expression]: ...
    def GetMutableSubsystemContext(self, arg0: System_[Expression], arg1: Context_[Expression]) -> Context_[Expression]: ...
    @overload
    def GetMyContextFromRoot(self, arg0: Context_[Expression]) -> Context_[Expression]: ...
    @overload
    def GetMyContextFromRoot(self) -> Any: ...
    def GetMyMutableContextFromRoot(self, arg0: Context_[Expression]) -> Context_[Expression]: ...
    def GetOutputPort(self, port_name: str) -> OutputPort_[Expression]: ...
    def GetSubsystemContext(self, arg0: System_[Expression], arg1: Context_[Expression]) -> Context_[Expression]: ...
    def GetUniquePeriodicDiscreteUpdateAttribute(self) -> Optional[PeriodicEventData]: ...
    @overload
    def GetWitnessFunctions(self, context: Context_[Expression]) -> List[WitnessFunction_[Expression]]: ...
    @overload
    def GetWitnessFunctions(self, context) -> Any: ...
    def HasAnyDirectFeedthrough(self) -> bool: ...
    @overload
    def HasDirectFeedthrough(self, output_port: int) -> bool: ...
    @overload
    def HasDirectFeedthrough(self, input_port: int, output_port: int) -> bool: ...
    @overload
    def IsDifferenceEquationSystem(self) -> Tuple[bool,float]: ...
    @overload
    def IsDifferenceEquationSystem(self) -> Any: ...
    def Publish(self, arg0: Context_[Expression]) -> None: ...
    def SetDefaultContext(self, arg0: Context_[Expression]) -> None: ...
    def SetRandomContext(self, context: Context_[Expression], generator: pydrake.common._module_py.RandomGenerator) -> None: ...
    def ToAutoDiffXd(self) -> System_[AutoDiffXd]: ...
    def ToAutoDiffXdMaybe(self) -> System_[AutoDiffXd]: ...
    def ToScalarTypeMaybe[AutoDiffXd](self, *args, **kwargs) -> Any: ...
    def ToScalarTypeMaybe[Expression](self, *args, **kwargs) -> Any: ...
    def ToScalarTypeMaybe[float](self, *args, **kwargs) -> Any: ...
    def ToScalarType[AutoDiffXd](self, *args, **kwargs) -> Any: ...
    def ToScalarType[Expression](self, *args, **kwargs) -> Any: ...
    def ToScalarType[float](self, *args, **kwargs) -> Any: ...
    def ToSymbolic(self) -> System_[Expression]: ...
    def ToSymbolicMaybe(self) -> System_[Expression]: ...
    @overload
    def get_input_port(self, port_index: int) -> InputPort_[Expression]: ...
    @overload
    def get_input_port(self) -> InputPort_[Expression]: ...
    @overload
    def get_output_port(self, port_index: int) -> OutputPort_[Expression]: ...
    @overload
    def get_output_port(self) -> OutputPort_[Expression]: ...

class System_[float](SystemBase):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    ToScalarType: Any
    ToScalarTypeMaybe: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def Accept(self, v) -> None: ...
    def AllocateContext(self) -> Context_[float]: ...
    def AllocateDiscreteVariables(self) -> DiscreteValues_[float]: ...
    def AllocateImplicitTimeDerivativesResidual(self) -> numpy.ndarray[numpy.float64[m,1]]: ...
    def AllocateInputAbstract(self, input_port: InputPort_[float]) -> pydrake.common.value.AbstractValue: ...
    def AllocateInputVector(self, input_port: InputPort_[float]) -> BasicVector_[float]: ...
    def AllocateOutput(self) -> SystemOutput_[float]: ...
    def AllocateTimeDerivatives(self) -> ContinuousState_[float]: ...
    def CalcConservativePower(self, context: Context_[float]) -> float: ...
    def CalcDiscreteVariableUpdates(self, context: Context_[float], discrete_state: DiscreteValues_[float]) -> None: ...
    def CalcForcedDiscreteVariableUpdate(self, context: Context_[float], discrete_state: DiscreteValues_[float]) -> None: ...
    def CalcForcedUnrestrictedUpdate(self, context: Context_[float], state: State_[float]) -> None: ...
    @overload
    def CalcImplicitTimeDerivativesResidual(self, context: Context_[float], proposed_derivatives: ContinuousState_[float], residual: Optional[numpy.ndarray[numpy.float64[m,1],flags.writeable]]) -> None: ...
    @overload
    def CalcImplicitTimeDerivativesResidual(self, context: Context_[float], proposed_derivatives: ContinuousState_[float]) -> numpy.ndarray[numpy.float64[m,1]]: ...
    def CalcKineticEnergy(self, context: Context_[float]) -> float: ...
    def CalcNonConservativePower(self, context: Context_[float]) -> float: ...
    def CalcOutput(self, context: Context_[float], outputs: SystemOutput_[float]) -> None: ...
    def CalcPotentialEnergy(self, context: Context_[float]) -> float: ...
    def CalcTimeDerivatives(self, context: Context_[float], derivatives: ContinuousState_[float]) -> None: ...
    def CalcUnrestrictedUpdate(self, context: Context_[float], state: State_[float]) -> None: ...
    def CreateDefaultContext(self) -> Context_[float]: ...
    def DeclareInputPort(self, name: Union[str,UseDefaultName], type: PortDataType, size: int, random_type: Optional[pydrake.common._module_py.RandomDistribution] = ...) -> InputPort_[float]: ...
    def EvalAbstractInput(self, arg0: Context_[float], arg1: int) -> pydrake.common.value.AbstractValue: ...
    def EvalKineticEnergy(self, context: Context_[float]) -> float: ...
    def EvalPotentialEnergy(self, context: Context_[float]) -> float: ...
    def EvalTimeDerivatives(self, arg0: Context_[float]) -> ContinuousState_[float]: ...
    @overload
    def EvalUniquePeriodicDiscreteUpdate(self, context: Context_[float]) -> DiscreteValues_[float]: ...
    @overload
    def EvalUniquePeriodicDiscreteUpdate(self, context) -> Any: ...
    @overload
    def EvalUniquePeriodicDiscreteUpdate(self) -> Any: ...
    def EvalVectorInput(self, arg0: Context_[float], arg1: int) -> BasicVector_[float]: ...
    def FixInputPortsFrom(self, other_system: System_[float], other_context: Context_[float], target_context: Context_[float]) -> None: ...
    def ForcedPublish(self, context: Context_[float]) -> None: ...
    def GetGraphvizString(self, max_depth: int = ...) -> object: ...
    def GetInputPort(self, port_name: str) -> InputPort_[float]: ...
    def GetMutableSubsystemContext(self, arg0: System_[float], arg1: Context_[float]) -> Context_[float]: ...
    @overload
    def GetMyContextFromRoot(self, arg0: Context_[float]) -> Context_[float]: ...
    @overload
    def GetMyContextFromRoot(self) -> Any: ...
    def GetMyMutableContextFromRoot(self, arg0: Context_[float]) -> Context_[float]: ...
    def GetOutputPort(self, port_name: str) -> OutputPort_[float]: ...
    def GetSubsystemContext(self, arg0: System_[float], arg1: Context_[float]) -> Context_[float]: ...
    def GetUniquePeriodicDiscreteUpdateAttribute(self) -> Optional[PeriodicEventData]: ...
    @overload
    def GetWitnessFunctions(self, context: Context_[float]) -> List[WitnessFunction_[float]]: ...
    @overload
    def GetWitnessFunctions(self, context) -> Any: ...
    def HasAnyDirectFeedthrough(self) -> bool: ...
    @overload
    def HasDirectFeedthrough(self, output_port: int) -> bool: ...
    @overload
    def HasDirectFeedthrough(self, input_port: int, output_port: int) -> bool: ...
    @overload
    def IsDifferenceEquationSystem(self) -> Tuple[bool,float]: ...
    @overload
    def IsDifferenceEquationSystem(self) -> Any: ...
    def Publish(self, arg0: Context_[float]) -> None: ...
    def SetDefaultContext(self, arg0: Context_[float]) -> None: ...
    def SetRandomContext(self, context: Context_[float], generator: pydrake.common._module_py.RandomGenerator) -> None: ...
    def ToAutoDiffXd(self, *args, **kwargs) -> Any: ...
    def ToAutoDiffXdMaybe(self, *args, **kwargs) -> Any: ...
    def ToScalarTypeMaybe[AutoDiffXd](self, *args, **kwargs) -> Any: ...
    def ToScalarTypeMaybe[Expression](self, *args, **kwargs) -> Any: ...
    def ToScalarTypeMaybe[float](self, *args, **kwargs) -> Any: ...
    def ToScalarType[AutoDiffXd](self, *args, **kwargs) -> Any: ...
    def ToScalarType[Expression](self, *args, **kwargs) -> Any: ...
    def ToScalarType[float](self, *args, **kwargs) -> Any: ...
    def ToSymbolic(self, *args, **kwargs) -> Any: ...
    def ToSymbolicMaybe(self, *args, **kwargs) -> Any: ...
    @overload
    def get_input_port(self, port_index: int) -> InputPort_[float]: ...
    @overload
    def get_input_port(self) -> InputPort_[float]: ...
    @overload
    def get_output_port(self, port_index: int) -> OutputPort_[float]: ...
    @overload
    def get_output_port(self) -> OutputPort_[float]: ...

class TriggerType:
    __members__: ClassVar[dict] = ...  # read-only
    __entries: ClassVar[dict] = ...
    _pybind11_del_orig: ClassVar[None] = ...
    kForced: ClassVar[TriggerType] = ...
    kInitialization: ClassVar[TriggerType] = ...
    kPerStep: ClassVar[TriggerType] = ...
    kPeriodic: ClassVar[TriggerType] = ...
    kTimed: ClassVar[TriggerType] = ...
    kUnknown: ClassVar[TriggerType] = ...
    kWitness: ClassVar[TriggerType] = ...
    def __init__(self, value: int) -> None: ...
    def __del__(self, *args, **kwargs) -> Any: ...
    def __eq__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    def __setstate__(self, state: int) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class UnrestrictedUpdateEvent(Event_[float]):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, callback) -> None: ...
    @overload
    def __init__(self, system_callback) -> None: ...

class UnrestrictedUpdateEvent_[AutoDiffXd](Event_[AutoDiffXd]):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, callback) -> None: ...
    @overload
    def __init__(self, system_callback) -> None: ...

class UnrestrictedUpdateEvent_[Expression](Event_[Expression]):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, callback) -> None: ...
    @overload
    def __init__(self, system_callback) -> None: ...

class UnrestrictedUpdateEvent_[float](Event_[float]):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, callback) -> None: ...
    @overload
    def __init__(self, system_callback) -> None: ...

class UseDefaultName:
    _pybind11_del_orig: ClassVar[None] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __del__(self, *args, **kwargs) -> Any: ...

class ValueProducer:
    def __init__(self, allocate: Callable[[],pydrake.common.value.AbstractValue], calc: Callable[[ContextBase,pydrake.common.value.AbstractValue],None]) -> None: ...
    def NoopCalc(self, *args, **kwargs) -> Any: ...

class VectorBase:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def CopyToVector(self) -> numpy.ndarray[numpy.float64[m,1]]: ...
    def GetAtIndex(self, index: int) -> float: ...
    def PlusEqScaled(self, scale: float, rhs: VectorBase_[float]) -> VectorBase_[float]: ...
    def SetAtIndex(self, index: int, value: float) -> None: ...
    def SetFrom(self, value: VectorBase_[float]) -> None: ...
    def SetFromVector(self, value: numpy.ndarray[numpy.float64[m,1]]) -> None: ...
    def SetZero(self) -> None: ...
    def size(self) -> int: ...
    def __getitem__(self, arg0: int) -> float: ...
    def __setitem__(self, arg0: int, arg1: float) -> None: ...

class VectorBase_[AutoDiffXd]:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def CopyToVector(self) -> numpy.ndarray[object[m,1]]: ...
    def GetAtIndex(self, index: int) -> pydrake.autodiffutils.AutoDiffXd: ...
    def PlusEqScaled(self, scale: pydrake.autodiffutils.AutoDiffXd, rhs: VectorBase_[AutoDiffXd]) -> VectorBase_[AutoDiffXd]: ...
    def SetAtIndex(self, index: int, value: pydrake.autodiffutils.AutoDiffXd) -> None: ...
    def SetFrom(self, value: VectorBase_[AutoDiffXd]) -> None: ...
    def SetFromVector(self, value: numpy.ndarray[object[m,1]]) -> None: ...
    def SetZero(self) -> None: ...
    def size(self) -> int: ...
    def __getitem__(self, arg0: int) -> pydrake.autodiffutils.AutoDiffXd: ...
    def __setitem__(self, arg0: int, arg1: pydrake.autodiffutils.AutoDiffXd) -> None: ...

class VectorBase_[Expression]:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def CopyToVector(self) -> numpy.ndarray[object[m,1]]: ...
    def GetAtIndex(self, index: int) -> pydrake.symbolic.Expression: ...
    def PlusEqScaled(self, scale: pydrake.symbolic.Expression, rhs: VectorBase_[Expression]) -> VectorBase_[Expression]: ...
    def SetAtIndex(self, index: int, value: pydrake.symbolic.Expression) -> None: ...
    def SetFrom(self, value: VectorBase_[Expression]) -> None: ...
    def SetFromVector(self, value: numpy.ndarray[object[m,1]]) -> None: ...
    def SetZero(self) -> None: ...
    def size(self) -> int: ...
    def __getitem__(self, arg0: int) -> pydrake.symbolic.Expression: ...
    def __setitem__(self, arg0: int, arg1: pydrake.symbolic.Expression) -> None: ...

class VectorBase_[float]:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def CopyToVector(self) -> numpy.ndarray[numpy.float64[m,1]]: ...
    def GetAtIndex(self, index: int) -> float: ...
    def PlusEqScaled(self, scale: float, rhs: VectorBase_[float]) -> VectorBase_[float]: ...
    def SetAtIndex(self, index: int, value: float) -> None: ...
    def SetFrom(self, value: VectorBase_[float]) -> None: ...
    def SetFromVector(self, value: numpy.ndarray[numpy.float64[m,1]]) -> None: ...
    def SetZero(self) -> None: ...
    def size(self) -> int: ...
    def __getitem__(self, arg0: int) -> float: ...
    def __setitem__(self, arg0: int, arg1: float) -> None: ...

class VectorSystem(LeafSystem_[float]):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, input_size: int, output_size: int, direct_feedthrough: Optional[bool] = ...) -> None: ...

class VectorSystem_[AutoDiffXd](LeafSystem_[AutoDiffXd]):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, input_size: int, output_size: int, direct_feedthrough: Optional[bool] = ...) -> None: ...

class VectorSystem_[Expression](LeafSystem_[Expression]):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, input_size: int, output_size: int, direct_feedthrough: Optional[bool] = ...) -> None: ...

class VectorSystem_[float](LeafSystem_[float]):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, input_size: int, output_size: int, direct_feedthrough: Optional[bool] = ...) -> None: ...

class WitnessFunction:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class WitnessFunctionDirection:
    __members__: ClassVar[dict] = ...  # read-only
    __entries: ClassVar[dict] = ...
    _pybind11_del_orig: ClassVar[None] = ...
    kCrossesZero: ClassVar[WitnessFunctionDirection] = ...
    kNegativeThenNonNegative: ClassVar[WitnessFunctionDirection] = ...
    kNone: ClassVar[WitnessFunctionDirection] = ...
    kPositiveThenNonPositive: ClassVar[WitnessFunctionDirection] = ...
    def __init__(self, value: int) -> None: ...
    def __del__(self, *args, **kwargs) -> Any: ...
    def __eq__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    def __setstate__(self, state: int) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class WitnessFunction_[AutoDiffXd]:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class WitnessFunction_[Expression]:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class WitnessFunction_[float]:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class _TemporaryName_N5drake5ValueINS_13TypeSafeIndexINS_7systems12InputPortTagEEEEE(pydrake.common.value.AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: InputPortIndex) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> InputPortIndex: ...
    def get_value(self) -> InputPortIndex: ...
    def set_value(self, arg0: InputPortIndex) -> None: ...

class _TemporaryName_N5drake5ValueINS_13TypeSafeIndexINS_7systems13DependencyTagEEEEE(pydrake.common.value.AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: DependencyTicket) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> DependencyTicket: ...
    def get_value(self) -> DependencyTicket: ...
    def set_value(self, arg0: DependencyTicket) -> None: ...

class _TemporaryName_N5drake5ValueINS_13TypeSafeIndexINS_7systems13OutputPortTagEEEEE(pydrake.common.value.AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: OutputPortIndex) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> OutputPortIndex: ...
    def get_value(self) -> OutputPortIndex: ...
    def set_value(self, arg0: OutputPortIndex) -> None: ...

class _TemporaryName_N5drake5ValueINS_13TypeSafeIndexINS_7systems16AbstractStateTagEEEEE(pydrake.common.value.AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: AbstractStateIndex) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> AbstractStateIndex: ...
    def get_value(self) -> AbstractStateIndex: ...
    def set_value(self, arg0: AbstractStateIndex) -> None: ...

class _TemporaryName_N5drake5ValueINS_13TypeSafeIndexINS_7systems16DiscreteStateTagEEEEE(pydrake.common.value.AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: DiscreteStateIndex) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> DiscreteStateIndex: ...
    def get_value(self) -> DiscreteStateIndex: ...
    def set_value(self, arg0: DiscreteStateIndex) -> None: ...

class _TemporaryName_N5drake5ValueINS_13TypeSafeIndexINS_7systems17SubsystemIndexTagEEEEE(pydrake.common.value.AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: SubsystemIndex) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> SubsystemIndex: ...
    def get_value(self) -> SubsystemIndex: ...
    def set_value(self, arg0: SubsystemIndex) -> None: ...

class _TemporaryName_N5drake5ValueINS_13TypeSafeIndexINS_7systems18ContinuousStateTagEEEEE(pydrake.common.value.AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: ContinuousStateIndex) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> ContinuousStateIndex: ...
    def get_value(self) -> ContinuousStateIndex: ...
    def set_value(self, arg0: ContinuousStateIndex) -> None: ...

class _TemporaryName_N5drake5ValueINS_13TypeSafeIndexINS_7systems19NumericParameterTagEEEEE(pydrake.common.value.AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: NumericParameterIndex) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> NumericParameterIndex: ...
    def get_value(self) -> NumericParameterIndex: ...
    def set_value(self, arg0: NumericParameterIndex) -> None: ...

class _TemporaryName_N5drake5ValueINS_13TypeSafeIndexINS_7systems20AbstractParameterTagEEEEE(pydrake.common.value.AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: AbstractParameterIndex) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> AbstractParameterIndex: ...
    def get_value(self) -> AbstractParameterIndex: ...
    def set_value(self, arg0: AbstractParameterIndex) -> None: ...

class _TemporaryName_N5drake5ValueINS_13TypeSafeIndexINS_7systems8CacheTagEEEEE(pydrake.common.value.AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: CacheIndex) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> CacheIndex: ...
    def get_value(self) -> CacheIndex: ...
    def set_value(self, arg0: CacheIndex) -> None: ...

class _TemporaryName_N5drake5ValueINS_7systems11BasicVectorIN5Eigen14AutoDiffScalarINS3_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEEEEEEE(pydrake.common.value.AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: BasicVector_[AutoDiffXd]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> BasicVector_[AutoDiffXd]: ...
    def get_value(self) -> BasicVector_[AutoDiffXd]: ...
    @overload
    def set_value(self, arg0: BasicVector_[AutoDiffXd]) -> None: ...
    @overload
    def set_value(self, value: pydrake.autodiffutils.AutoDiffXd) -> None: ...
    @overload
    def set_value(self, value: numpy.ndarray[object[m,1]]) -> None: ...

class _TemporaryName_N5drake5ValueINS_7systems11BasicVectorINS_8symbolic10ExpressionEEEEE(pydrake.common.value.AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: BasicVector_[Expression]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> BasicVector_[Expression]: ...
    def get_value(self) -> BasicVector_[Expression]: ...
    @overload
    def set_value(self, arg0: BasicVector_[Expression]) -> None: ...
    @overload
    def set_value(self, value: pydrake.symbolic.Expression) -> None: ...
    @overload
    def set_value(self, value: numpy.ndarray[object[m,1]]) -> None: ...

class _TemporaryName_N5drake5ValueINS_7systems11BasicVectorIdEEEE(pydrake.common.value.AbstractValue):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, arg0: BasicVector_[float]) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> Any: ...
    def get_mutable_value(self) -> BasicVector_[float]: ...
    def get_value(self) -> BasicVector_[float]: ...
    @overload
    def set_value(self, arg0: BasicVector_[float]) -> None: ...
    @overload
    def set_value(self, value: float) -> None: ...
    @overload
    def set_value(self, value: numpy.ndarray[numpy.float64[m,1]]) -> None: ...

class _TemporaryName_N5drake7systems10LeafSystemIN5Eigen14AutoDiffScalarINS2_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEEEEE(System_[AutoDiffXd]):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, converter: SystemScalarConverter) -> None: ...
    def DeclareAbstractInputPort(self, name: str, model_value: pydrake.common.value.AbstractValue) -> InputPort_[AutoDiffXd]: ...
    def DeclareAbstractOutputPort(self, name: str, alloc: Callable[[],pydrake.common.value.AbstractValue], calc: Callable[[Context_[AutoDiffXd],pydrake.common.value.AbstractValue],None], prerequisites_of_calc: Set[DependencyTicket] = ...) -> OutputPort_[AutoDiffXd]: ...
    def DeclareAbstractParameter(self, model_value: pydrake.common.value.AbstractValue) -> int: ...
    def DeclareAbstractState(self, model_value: pydrake.common.value.AbstractValue) -> AbstractStateIndex: ...
    @overload
    def DeclareContinuousState(self, num_state_variables: int) -> ContinuousStateIndex: ...
    @overload
    def DeclareContinuousState(self, num_q: int, num_v: int, num_z: int) -> ContinuousStateIndex: ...
    @overload
    def DeclareContinuousState(self, model_vector: BasicVector_[AutoDiffXd]) -> ContinuousStateIndex: ...
    @overload
    def DeclareContinuousState(self, model_vector: BasicVector_[AutoDiffXd], num_q: int, num_v: int, num_z: int) -> ContinuousStateIndex: ...
    @overload
    def DeclareDiscreteState(self, model_vector: BasicVector_[AutoDiffXd]) -> DiscreteStateIndex: ...
    @overload
    def DeclareDiscreteState(self, vector: numpy.ndarray[object[m,1]]) -> DiscreteStateIndex: ...
    @overload
    def DeclareDiscreteState(self, num_state_variables: int) -> DiscreteStateIndex: ...
    @overload
    def DeclareDiscreteState(self) -> Any: ...
    @overload
    def DeclareForcedDiscreteUpdateEvent(self, update: Callable[[Context_[AutoDiffXd],DiscreteValues_[AutoDiffXd]],Optional[EventStatus]]) -> None: ...
    @overload
    def DeclareForcedDiscreteUpdateEvent(self) -> Any: ...
    @overload
    def DeclareForcedPublishEvent(self, publish: Callable[[Context_[AutoDiffXd]],Optional[EventStatus]]) -> None: ...
    @overload
    def DeclareForcedPublishEvent(self) -> Any: ...
    @overload
    def DeclareForcedUnrestrictedUpdateEvent(self, update: Callable[[Context_[AutoDiffXd],State_[AutoDiffXd]],Optional[EventStatus]]) -> None: ...
    @overload
    def DeclareForcedUnrestrictedUpdateEvent(self) -> Any: ...
    def DeclareInitializationDiscreteUpdateEvent(self, update: Callable[[Context_[AutoDiffXd],DiscreteValues_[AutoDiffXd]],Optional[EventStatus]]) -> None: ...
    def DeclareInitializationEvent(self, event: Event_[AutoDiffXd]) -> None: ...
    def DeclareInitializationPublishEvent(self, publish: Callable[[Context_[AutoDiffXd]],Optional[EventStatus]]) -> None: ...
    def DeclareInitializationUnrestrictedUpdateEvent(self, update: Callable[[Context_[AutoDiffXd],State_[AutoDiffXd]],Optional[EventStatus]]) -> None: ...
    def DeclareNumericParameter(self, model_vector: BasicVector_[AutoDiffXd]) -> int: ...
    def DeclarePerStepDiscreteUpdateEvent(self, update: Callable[[Context_[AutoDiffXd],DiscreteValues_[AutoDiffXd]],Optional[EventStatus]]) -> None: ...
    def DeclarePerStepEvent(self, event: Event_[AutoDiffXd]) -> None: ...
    def DeclarePerStepPublishEvent(self, publish: Callable[[Context_[AutoDiffXd]],Optional[EventStatus]]) -> None: ...
    def DeclarePerStepUnrestrictedUpdateEvent(self, update: Callable[[Context_[AutoDiffXd],State_[AutoDiffXd]],Optional[EventStatus]]) -> None: ...
    def DeclarePeriodicDiscreteUpdate(self, period_sec: float, offset_sec: float = ...) -> None: ...
    def DeclarePeriodicDiscreteUpdateEvent(self, period_sec: float, offset_sec: float, update: Callable[[Context_[AutoDiffXd],DiscreteValues_[AutoDiffXd]],Optional[EventStatus]]) -> None: ...
    def DeclarePeriodicDiscreteUpdateNoHandler(self, period_sec: float, offset_sec: float = ...) -> None: ...
    def DeclarePeriodicEvent(self, period_sec: float, offset_sec: float, event: Event_[AutoDiffXd]) -> None: ...
    def DeclarePeriodicPublish(self, period_sec: float, offset_sec: float = ...) -> None: ...
    def DeclarePeriodicPublishEvent(self, period_sec: float, offset_sec: float, publish: Callable[[Context_[AutoDiffXd]],Optional[EventStatus]]) -> None: ...
    def DeclarePeriodicPublishNoHandler(self, period_sec: float, offset_sec: float = ...) -> None: ...
    def DeclarePeriodicUnrestrictedUpdateEvent(self, period_sec: float, offset_sec: float, update: Callable[[Context_[AutoDiffXd],State_[AutoDiffXd]],Optional[EventStatus]]) -> None: ...
    @overload
    def DeclareStateOutputPort(self, name: Union[str,UseDefaultName], state_index: ContinuousStateIndex) -> LeafOutputPort_[AutoDiffXd]: ...
    @overload
    def DeclareStateOutputPort(self, name: Union[str,UseDefaultName], state_index: DiscreteStateIndex) -> LeafOutputPort_[AutoDiffXd]: ...
    @overload
    def DeclareStateOutputPort(self, name: Union[str,UseDefaultName], state_index: AbstractStateIndex) -> LeafOutputPort_[AutoDiffXd]: ...
    @overload
    def DeclareVectorInputPort(self, name: str, model_vector: BasicVector_[AutoDiffXd], random_type: Optional[pydrake.common._module_py.RandomDistribution] = ...) -> InputPort_[AutoDiffXd]: ...
    @overload
    def DeclareVectorInputPort(self, name: str, size: int, random_type: Optional[pydrake.common._module_py.RandomDistribution] = ...) -> InputPort_[AutoDiffXd]: ...
    @overload
    def DeclareVectorOutputPort(self, name: str, model_value: BasicVector_[AutoDiffXd], calc: Callable[[Context_[AutoDiffXd],BasicVector_[AutoDiffXd]],None], prerequisites_of_calc: Set[DependencyTicket] = ...) -> OutputPort_[AutoDiffXd]: ...
    @overload
    def DeclareVectorOutputPort(self, name: str, size: int, calc: Callable[[Context_[AutoDiffXd],BasicVector_[AutoDiffXd]],None], prerequisites_of_calc: Set[DependencyTicket] = ...) -> OutputPort_[AutoDiffXd]: ...
    def DoCalcDiscreteVariableUpdates(self, arg0: Context_[AutoDiffXd], arg1: List[DiscreteUpdateEvent_[AutoDiffXd]], arg2: DiscreteValues_[AutoDiffXd]) -> None: ...
    def DoCalcTimeDerivatives(self, arg0: Context_[AutoDiffXd], arg1: ContinuousState_[AutoDiffXd]) -> None: ...
    def DoPublish(self, arg0: Context_[AutoDiffXd], arg1: List[PublishEvent_[AutoDiffXd]]) -> None: ...
    @overload
    def MakeWitnessFunction(self, description: str, direction_type: WitnessFunctionDirection, calc: Callable[[Context_[AutoDiffXd]],pydrake.autodiffutils.AutoDiffXd]) -> WitnessFunction_[AutoDiffXd]: ...
    @overload
    def MakeWitnessFunction(self, description: str, direction_type: WitnessFunctionDirection, calc: Callable[[Context_[AutoDiffXd]],pydrake.autodiffutils.AutoDiffXd], e: Event_[AutoDiffXd]) -> WitnessFunction_[AutoDiffXd]: ...

class _TemporaryName_N5drake7systems10LeafSystemINS_8symbolic10ExpressionEEE(System_[Expression]):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, converter: SystemScalarConverter) -> None: ...
    def DeclareAbstractInputPort(self, name: str, model_value: pydrake.common.value.AbstractValue) -> InputPort_[Expression]: ...
    def DeclareAbstractOutputPort(self, name: str, alloc: Callable[[],pydrake.common.value.AbstractValue], calc: Callable[[Context_[Expression],pydrake.common.value.AbstractValue],None], prerequisites_of_calc: Set[DependencyTicket] = ...) -> OutputPort_[Expression]: ...
    def DeclareAbstractParameter(self, model_value: pydrake.common.value.AbstractValue) -> int: ...
    def DeclareAbstractState(self, model_value: pydrake.common.value.AbstractValue) -> AbstractStateIndex: ...
    @overload
    def DeclareContinuousState(self, num_state_variables: int) -> ContinuousStateIndex: ...
    @overload
    def DeclareContinuousState(self, num_q: int, num_v: int, num_z: int) -> ContinuousStateIndex: ...
    @overload
    def DeclareContinuousState(self, model_vector: BasicVector_[Expression]) -> ContinuousStateIndex: ...
    @overload
    def DeclareContinuousState(self, model_vector: BasicVector_[Expression], num_q: int, num_v: int, num_z: int) -> ContinuousStateIndex: ...
    @overload
    def DeclareDiscreteState(self, model_vector: BasicVector_[Expression]) -> DiscreteStateIndex: ...
    @overload
    def DeclareDiscreteState(self, vector: numpy.ndarray[object[m,1]]) -> DiscreteStateIndex: ...
    @overload
    def DeclareDiscreteState(self, num_state_variables: int) -> DiscreteStateIndex: ...
    @overload
    def DeclareDiscreteState(self) -> Any: ...
    @overload
    def DeclareForcedDiscreteUpdateEvent(self, update: Callable[[Context_[Expression],DiscreteValues_[Expression]],Optional[EventStatus]]) -> None: ...
    @overload
    def DeclareForcedDiscreteUpdateEvent(self) -> Any: ...
    @overload
    def DeclareForcedPublishEvent(self, publish: Callable[[Context_[Expression]],Optional[EventStatus]]) -> None: ...
    @overload
    def DeclareForcedPublishEvent(self) -> Any: ...
    @overload
    def DeclareForcedUnrestrictedUpdateEvent(self, update: Callable[[Context_[Expression],State_[Expression]],Optional[EventStatus]]) -> None: ...
    @overload
    def DeclareForcedUnrestrictedUpdateEvent(self) -> Any: ...
    def DeclareInitializationDiscreteUpdateEvent(self, update: Callable[[Context_[Expression],DiscreteValues_[Expression]],Optional[EventStatus]]) -> None: ...
    def DeclareInitializationEvent(self, event: Event_[Expression]) -> None: ...
    def DeclareInitializationPublishEvent(self, publish: Callable[[Context_[Expression]],Optional[EventStatus]]) -> None: ...
    def DeclareInitializationUnrestrictedUpdateEvent(self, update: Callable[[Context_[Expression],State_[Expression]],Optional[EventStatus]]) -> None: ...
    def DeclareNumericParameter(self, model_vector: BasicVector_[Expression]) -> int: ...
    def DeclarePerStepDiscreteUpdateEvent(self, update: Callable[[Context_[Expression],DiscreteValues_[Expression]],Optional[EventStatus]]) -> None: ...
    def DeclarePerStepEvent(self, event: Event_[Expression]) -> None: ...
    def DeclarePerStepPublishEvent(self, publish: Callable[[Context_[Expression]],Optional[EventStatus]]) -> None: ...
    def DeclarePerStepUnrestrictedUpdateEvent(self, update: Callable[[Context_[Expression],State_[Expression]],Optional[EventStatus]]) -> None: ...
    def DeclarePeriodicDiscreteUpdate(self, period_sec: float, offset_sec: float = ...) -> None: ...
    def DeclarePeriodicDiscreteUpdateEvent(self, period_sec: float, offset_sec: float, update: Callable[[Context_[Expression],DiscreteValues_[Expression]],Optional[EventStatus]]) -> None: ...
    def DeclarePeriodicDiscreteUpdateNoHandler(self, period_sec: float, offset_sec: float = ...) -> None: ...
    def DeclarePeriodicEvent(self, period_sec: float, offset_sec: float, event: Event_[Expression]) -> None: ...
    def DeclarePeriodicPublish(self, period_sec: float, offset_sec: float = ...) -> None: ...
    def DeclarePeriodicPublishEvent(self, period_sec: float, offset_sec: float, publish: Callable[[Context_[Expression]],Optional[EventStatus]]) -> None: ...
    def DeclarePeriodicPublishNoHandler(self, period_sec: float, offset_sec: float = ...) -> None: ...
    def DeclarePeriodicUnrestrictedUpdateEvent(self, period_sec: float, offset_sec: float, update: Callable[[Context_[Expression],State_[Expression]],Optional[EventStatus]]) -> None: ...
    @overload
    def DeclareStateOutputPort(self, name: Union[str,UseDefaultName], state_index: ContinuousStateIndex) -> LeafOutputPort_[Expression]: ...
    @overload
    def DeclareStateOutputPort(self, name: Union[str,UseDefaultName], state_index: DiscreteStateIndex) -> LeafOutputPort_[Expression]: ...
    @overload
    def DeclareStateOutputPort(self, name: Union[str,UseDefaultName], state_index: AbstractStateIndex) -> LeafOutputPort_[Expression]: ...
    @overload
    def DeclareVectorInputPort(self, name: str, model_vector: BasicVector_[Expression], random_type: Optional[pydrake.common._module_py.RandomDistribution] = ...) -> InputPort_[Expression]: ...
    @overload
    def DeclareVectorInputPort(self, name: str, size: int, random_type: Optional[pydrake.common._module_py.RandomDistribution] = ...) -> InputPort_[Expression]: ...
    @overload
    def DeclareVectorOutputPort(self, name: str, model_value: BasicVector_[Expression], calc: Callable[[Context_[Expression],BasicVector_[Expression]],None], prerequisites_of_calc: Set[DependencyTicket] = ...) -> OutputPort_[Expression]: ...
    @overload
    def DeclareVectorOutputPort(self, name: str, size: int, calc: Callable[[Context_[Expression],BasicVector_[Expression]],None], prerequisites_of_calc: Set[DependencyTicket] = ...) -> OutputPort_[Expression]: ...
    def DoCalcDiscreteVariableUpdates(self, arg0: Context_[Expression], arg1: List[DiscreteUpdateEvent_[Expression]], arg2: DiscreteValues_[Expression]) -> None: ...
    def DoCalcTimeDerivatives(self, arg0: Context_[Expression], arg1: ContinuousState_[Expression]) -> None: ...
    def DoPublish(self, arg0: Context_[Expression], arg1: List[PublishEvent_[Expression]]) -> None: ...
    @overload
    def MakeWitnessFunction(self, description: str, direction_type: WitnessFunctionDirection, calc: Callable[[Context_[Expression]],pydrake.symbolic.Expression]) -> WitnessFunction_[Expression]: ...
    @overload
    def MakeWitnessFunction(self, description: str, direction_type: WitnessFunctionDirection, calc: Callable[[Context_[Expression]],pydrake.symbolic.Expression], e: Event_[Expression]) -> WitnessFunction_[Expression]: ...

class _TemporaryName_N5drake7systems10LeafSystemIdEE(System_[float]):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, converter: SystemScalarConverter) -> None: ...
    def DeclareAbstractInputPort(self, name: str, model_value: pydrake.common.value.AbstractValue) -> InputPort_[float]: ...
    def DeclareAbstractOutputPort(self, name: str, alloc: Callable[[],pydrake.common.value.AbstractValue], calc: Callable[[Context_[float],pydrake.common.value.AbstractValue],None], prerequisites_of_calc: Set[DependencyTicket] = ...) -> OutputPort_[float]: ...
    def DeclareAbstractParameter(self, model_value: pydrake.common.value.AbstractValue) -> int: ...
    def DeclareAbstractState(self, model_value: pydrake.common.value.AbstractValue) -> AbstractStateIndex: ...
    @overload
    def DeclareContinuousState(self, num_state_variables: int) -> ContinuousStateIndex: ...
    @overload
    def DeclareContinuousState(self, num_q: int, num_v: int, num_z: int) -> ContinuousStateIndex: ...
    @overload
    def DeclareContinuousState(self, model_vector: BasicVector_[float]) -> ContinuousStateIndex: ...
    @overload
    def DeclareContinuousState(self, model_vector: BasicVector_[float], num_q: int, num_v: int, num_z: int) -> ContinuousStateIndex: ...
    @overload
    def DeclareDiscreteState(self, model_vector: BasicVector_[float]) -> DiscreteStateIndex: ...
    @overload
    def DeclareDiscreteState(self, vector: numpy.ndarray[numpy.float64[m,1]]) -> DiscreteStateIndex: ...
    @overload
    def DeclareDiscreteState(self, num_state_variables: int) -> DiscreteStateIndex: ...
    @overload
    def DeclareDiscreteState(self) -> Any: ...
    @overload
    def DeclareForcedDiscreteUpdateEvent(self, update: Callable[[Context_[float],DiscreteValues_[float]],Optional[EventStatus]]) -> None: ...
    @overload
    def DeclareForcedDiscreteUpdateEvent(self) -> Any: ...
    @overload
    def DeclareForcedPublishEvent(self, publish: Callable[[Context_[float]],Optional[EventStatus]]) -> None: ...
    @overload
    def DeclareForcedPublishEvent(self) -> Any: ...
    @overload
    def DeclareForcedUnrestrictedUpdateEvent(self, update: Callable[[Context_[float],State_[float]],Optional[EventStatus]]) -> None: ...
    @overload
    def DeclareForcedUnrestrictedUpdateEvent(self) -> Any: ...
    def DeclareInitializationDiscreteUpdateEvent(self, update: Callable[[Context_[float],DiscreteValues_[float]],Optional[EventStatus]]) -> None: ...
    def DeclareInitializationEvent(self, event: Event_[float]) -> None: ...
    def DeclareInitializationPublishEvent(self, publish: Callable[[Context_[float]],Optional[EventStatus]]) -> None: ...
    def DeclareInitializationUnrestrictedUpdateEvent(self, update: Callable[[Context_[float],State_[float]],Optional[EventStatus]]) -> None: ...
    def DeclareNumericParameter(self, model_vector: BasicVector_[float]) -> int: ...
    def DeclarePerStepDiscreteUpdateEvent(self, update: Callable[[Context_[float],DiscreteValues_[float]],Optional[EventStatus]]) -> None: ...
    def DeclarePerStepEvent(self, event: Event_[float]) -> None: ...
    def DeclarePerStepPublishEvent(self, publish: Callable[[Context_[float]],Optional[EventStatus]]) -> None: ...
    def DeclarePerStepUnrestrictedUpdateEvent(self, update: Callable[[Context_[float],State_[float]],Optional[EventStatus]]) -> None: ...
    def DeclarePeriodicDiscreteUpdate(self, period_sec: float, offset_sec: float = ...) -> None: ...
    def DeclarePeriodicDiscreteUpdateEvent(self, period_sec: float, offset_sec: float, update: Callable[[Context_[float],DiscreteValues_[float]],Optional[EventStatus]]) -> None: ...
    def DeclarePeriodicDiscreteUpdateNoHandler(self, period_sec: float, offset_sec: float = ...) -> None: ...
    def DeclarePeriodicEvent(self, period_sec: float, offset_sec: float, event: Event_[float]) -> None: ...
    def DeclarePeriodicPublish(self, period_sec: float, offset_sec: float = ...) -> None: ...
    def DeclarePeriodicPublishEvent(self, period_sec: float, offset_sec: float, publish: Callable[[Context_[float]],Optional[EventStatus]]) -> None: ...
    def DeclarePeriodicPublishNoHandler(self, period_sec: float, offset_sec: float = ...) -> None: ...
    def DeclarePeriodicUnrestrictedUpdateEvent(self, period_sec: float, offset_sec: float, update: Callable[[Context_[float],State_[float]],Optional[EventStatus]]) -> None: ...
    @overload
    def DeclareStateOutputPort(self, name: Union[str,UseDefaultName], state_index: ContinuousStateIndex) -> LeafOutputPort_[float]: ...
    @overload
    def DeclareStateOutputPort(self, name: Union[str,UseDefaultName], state_index: DiscreteStateIndex) -> LeafOutputPort_[float]: ...
    @overload
    def DeclareStateOutputPort(self, name: Union[str,UseDefaultName], state_index: AbstractStateIndex) -> LeafOutputPort_[float]: ...
    @overload
    def DeclareVectorInputPort(self, name: str, model_vector: BasicVector_[float], random_type: Optional[pydrake.common._module_py.RandomDistribution] = ...) -> InputPort_[float]: ...
    @overload
    def DeclareVectorInputPort(self, name: str, size: int, random_type: Optional[pydrake.common._module_py.RandomDistribution] = ...) -> InputPort_[float]: ...
    @overload
    def DeclareVectorOutputPort(self, name: str, model_value: BasicVector_[float], calc: Callable[[Context_[float],BasicVector_[float]],None], prerequisites_of_calc: Set[DependencyTicket] = ...) -> OutputPort_[float]: ...
    @overload
    def DeclareVectorOutputPort(self, name: str, size: int, calc: Callable[[Context_[float],BasicVector_[float]],None], prerequisites_of_calc: Set[DependencyTicket] = ...) -> OutputPort_[float]: ...
    def DoCalcDiscreteVariableUpdates(self, arg0: Context_[float], arg1: List[DiscreteUpdateEvent_[float]], arg2: DiscreteValues_[float]) -> None: ...
    def DoCalcTimeDerivatives(self, arg0: Context_[float], arg1: ContinuousState_[float]) -> None: ...
    def DoPublish(self, arg0: Context_[float], arg1: List[PublishEvent_[float]]) -> None: ...
    @overload
    def MakeWitnessFunction(self, description: str, direction_type: WitnessFunctionDirection, calc: Callable[[Context_[float]],float]) -> WitnessFunction_[float]: ...
    @overload
    def MakeWitnessFunction(self, description: str, direction_type: WitnessFunctionDirection, calc: Callable[[Context_[float]],float], e: Event_[float]) -> WitnessFunction_[float]: ...

class _TemporaryName_N5drake7systems10OutputPortIN5Eigen14AutoDiffScalarINS2_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEEEEE:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def Allocate(self) -> pydrake.common.value.AbstractValue: ...
    def Eval(self, arg0: Context_[AutoDiffXd]) -> object: ...
    def EvalAbstract(self, context: Context_[AutoDiffXd]) -> object: ...
    def EvalBasicVector(self, context: Context_[AutoDiffXd]) -> object: ...
    def get_data_type(self) -> PortDataType: ...
    def get_index(self) -> OutputPortIndex: ...
    def get_name(self) -> str: ...
    def get_system(self, *args, **kwargs) -> Any: ...
    def size(self) -> int: ...

class _TemporaryName_N5drake7systems10OutputPortINS_8symbolic10ExpressionEEE:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def Allocate(self) -> pydrake.common.value.AbstractValue: ...
    def Eval(self, arg0: Context_[Expression]) -> object: ...
    def EvalAbstract(self, context: Context_[Expression]) -> object: ...
    def EvalBasicVector(self, context: Context_[Expression]) -> object: ...
    def get_data_type(self) -> PortDataType: ...
    def get_index(self) -> OutputPortIndex: ...
    def get_name(self) -> str: ...
    def get_system(self, *args, **kwargs) -> Any: ...
    def size(self) -> int: ...

class _TemporaryName_N5drake7systems10OutputPortIdEE:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def Allocate(self) -> pydrake.common.value.AbstractValue: ...
    def Eval(self, arg0: Context_[float]) -> object: ...
    def EvalAbstract(self, context: Context_[float]) -> object: ...
    def EvalBasicVector(self, context: Context_[float]) -> object: ...
    def get_data_type(self) -> PortDataType: ...
    def get_index(self) -> OutputPortIndex: ...
    def get_name(self) -> str: ...
    def get_system(self, *args, **kwargs) -> Any: ...
    def size(self) -> int: ...

class _TemporaryName_N5drake7systems10ParametersIN5Eigen14AutoDiffScalarINS2_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEEEEE:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, numeric: List[BasicVector_[AutoDiffXd]], abstract: List[pydrake.common.value.AbstractValue]) -> None: ...
    @overload
    def __init__(self, numeric: List[BasicVector_[AutoDiffXd]]) -> None: ...
    @overload
    def __init__(self, abstract: List[pydrake.common.value.AbstractValue]) -> None: ...
    @overload
    def __init__(self, vec: BasicVector_[AutoDiffXd]) -> None: ...
    @overload
    def __init__(self, value: pydrake.common.value.AbstractValue) -> None: ...
    def Clone(self) -> Parameters_[AutoDiffXd]: ...
    def SetFrom(self, arg0: Parameters_[float]) -> None: ...
    def get_abstract_parameter(self, index: int) -> pydrake.common.value.AbstractValue: ...
    def get_abstract_parameters(self) -> AbstractValues: ...
    def get_mutable_abstract_parameter(self, index: int) -> pydrake.common.value.AbstractValue: ...
    def get_mutable_numeric_parameter(self, index: int) -> BasicVector_[AutoDiffXd]: ...
    def get_numeric_parameter(self, index: int) -> BasicVector_[AutoDiffXd]: ...
    def get_numeric_parameters(self, *args, **kwargs) -> Any: ...
    def num_abstract_parameters(self) -> int: ...
    def num_numeric_parameter_groups(self) -> int: ...
    def set_abstract_parameters(self, abstract_params: AbstractValues) -> None: ...
    def set_numeric_parameters(self, *args, **kwargs) -> Any: ...
    def __copy__(self) -> Parameters_[AutoDiffXd]: ...
    def __deepcopy__(self, arg0: dict) -> Parameters_[AutoDiffXd]: ...

class _TemporaryName_N5drake7systems10ParametersINS_8symbolic10ExpressionEEE:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, numeric: List[BasicVector_[Expression]], abstract: List[pydrake.common.value.AbstractValue]) -> None: ...
    @overload
    def __init__(self, numeric: List[BasicVector_[Expression]]) -> None: ...
    @overload
    def __init__(self, abstract: List[pydrake.common.value.AbstractValue]) -> None: ...
    @overload
    def __init__(self, vec: BasicVector_[Expression]) -> None: ...
    @overload
    def __init__(self, value: pydrake.common.value.AbstractValue) -> None: ...
    def Clone(self) -> Parameters_[Expression]: ...
    def SetFrom(self, arg0: Parameters_[float]) -> None: ...
    def get_abstract_parameter(self, index: int) -> pydrake.common.value.AbstractValue: ...
    def get_abstract_parameters(self) -> AbstractValues: ...
    def get_mutable_abstract_parameter(self, index: int) -> pydrake.common.value.AbstractValue: ...
    def get_mutable_numeric_parameter(self, index: int) -> BasicVector_[Expression]: ...
    def get_numeric_parameter(self, index: int) -> BasicVector_[Expression]: ...
    def get_numeric_parameters(self, *args, **kwargs) -> Any: ...
    def num_abstract_parameters(self) -> int: ...
    def num_numeric_parameter_groups(self) -> int: ...
    def set_abstract_parameters(self, abstract_params: AbstractValues) -> None: ...
    def set_numeric_parameters(self, numeric_params) -> None: ...
    def __copy__(self) -> Parameters_[Expression]: ...
    def __deepcopy__(self, arg0: dict) -> Parameters_[Expression]: ...

class _TemporaryName_N5drake7systems10ParametersIdEE:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, numeric: List[BasicVector_[float]], abstract: List[pydrake.common.value.AbstractValue]) -> None: ...
    @overload
    def __init__(self, numeric: List[BasicVector_[float]]) -> None: ...
    @overload
    def __init__(self, abstract: List[pydrake.common.value.AbstractValue]) -> None: ...
    @overload
    def __init__(self, vec: BasicVector_[float]) -> None: ...
    @overload
    def __init__(self, value: pydrake.common.value.AbstractValue) -> None: ...
    def Clone(self) -> Parameters_[float]: ...
    def SetFrom(self, arg0: Parameters_[float]) -> None: ...
    def get_abstract_parameter(self, index: int) -> pydrake.common.value.AbstractValue: ...
    def get_abstract_parameters(self) -> AbstractValues: ...
    def get_mutable_abstract_parameter(self, index: int) -> pydrake.common.value.AbstractValue: ...
    def get_mutable_numeric_parameter(self, index: int) -> BasicVector_[float]: ...
    def get_numeric_parameter(self, index: int) -> BasicVector_[float]: ...
    def get_numeric_parameters(self, *args, **kwargs) -> Any: ...
    def num_abstract_parameters(self) -> int: ...
    def num_numeric_parameter_groups(self) -> int: ...
    def set_abstract_parameters(self, abstract_params: AbstractValues) -> None: ...
    def set_numeric_parameters(self, numeric_params) -> None: ...
    def __copy__(self) -> Parameters_[float]: ...
    def __deepcopy__(self, arg0: dict) -> Parameters_[float]: ...

class _TemporaryName_N5drake7systems10VectorBaseIN5Eigen14AutoDiffScalarINS2_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEEEEE:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def CopyToVector(self) -> numpy.ndarray[object[m,1]]: ...
    def GetAtIndex(self, index: int) -> pydrake.autodiffutils.AutoDiffXd: ...
    def PlusEqScaled(self, scale: pydrake.autodiffutils.AutoDiffXd, rhs: VectorBase_[AutoDiffXd]) -> VectorBase_[AutoDiffXd]: ...
    def SetAtIndex(self, index: int, value: pydrake.autodiffutils.AutoDiffXd) -> None: ...
    def SetFrom(self, value: VectorBase_[AutoDiffXd]) -> None: ...
    def SetFromVector(self, value: numpy.ndarray[object[m,1]]) -> None: ...
    def SetZero(self) -> None: ...
    def size(self) -> int: ...
    def __getitem__(self, arg0: int) -> pydrake.autodiffutils.AutoDiffXd: ...
    def __setitem__(self, arg0: int, arg1: pydrake.autodiffutils.AutoDiffXd) -> None: ...

class _TemporaryName_N5drake7systems10VectorBaseINS_8symbolic10ExpressionEEE:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def CopyToVector(self) -> numpy.ndarray[object[m,1]]: ...
    def GetAtIndex(self, index: int) -> pydrake.symbolic.Expression: ...
    def PlusEqScaled(self, scale: pydrake.symbolic.Expression, rhs: VectorBase_[Expression]) -> VectorBase_[Expression]: ...
    def SetAtIndex(self, index: int, value: pydrake.symbolic.Expression) -> None: ...
    def SetFrom(self, value: VectorBase_[Expression]) -> None: ...
    def SetFromVector(self, value: numpy.ndarray[object[m,1]]) -> None: ...
    def SetZero(self) -> None: ...
    def size(self) -> int: ...
    def __getitem__(self, arg0: int) -> pydrake.symbolic.Expression: ...
    def __setitem__(self, arg0: int, arg1: pydrake.symbolic.Expression) -> None: ...

class _TemporaryName_N5drake7systems10VectorBaseIdEE:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def CopyToVector(self) -> numpy.ndarray[numpy.float64[m,1]]: ...
    def GetAtIndex(self, index: int) -> float: ...
    def PlusEqScaled(self, scale: float, rhs: VectorBase_[float]) -> VectorBase_[float]: ...
    def SetAtIndex(self, index: int, value: float) -> None: ...
    def SetFrom(self, value: VectorBase_[float]) -> None: ...
    def SetFromVector(self, value: numpy.ndarray[numpy.float64[m,1]]) -> None: ...
    def SetZero(self) -> None: ...
    def size(self) -> int: ...
    def __getitem__(self, arg0: int) -> float: ...
    def __setitem__(self, arg0: int, arg1: float) -> None: ...

class _TemporaryName_N5drake7systems11BasicVectorIN5Eigen14AutoDiffScalarINS2_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEEEEE(VectorBase_[AutoDiffXd]):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, data: numpy.ndarray[object[m,1]]) -> None: ...
    @overload
    def __init__(self, size: int) -> None: ...
    def Clone(self) -> BasicVector_[AutoDiffXd]: ...
    def _get_value_copy(self) -> numpy.ndarray[object[m,1]]: ...
    def get_mutable_value(self) -> numpy.ndarray[object[m,1],flags.writeable]: ...
    def get_value(self) -> numpy.ndarray[object[m,1]]: ...
    def set_value(self, arg0: numpy.ndarray[object[m,1]]) -> None: ...
    def value(self) -> numpy.ndarray[object[m,1]]: ...
    def __copy__(self) -> BasicVector_[AutoDiffXd]: ...
    def __deepcopy__(self, arg0: dict) -> BasicVector_[AutoDiffXd]: ...

class _TemporaryName_N5drake7systems11BasicVectorINS_8symbolic10ExpressionEEE(VectorBase_[Expression]):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, data: numpy.ndarray[object[m,1]]) -> None: ...
    @overload
    def __init__(self, size: int) -> None: ...
    def Clone(self) -> BasicVector_[Expression]: ...
    def _get_value_copy(self) -> numpy.ndarray[object[m,1]]: ...
    def get_mutable_value(self) -> numpy.ndarray[object[m,1],flags.writeable]: ...
    def get_value(self) -> numpy.ndarray[object[m,1]]: ...
    def set_value(self, arg0: numpy.ndarray[object[m,1]]) -> None: ...
    def value(self) -> numpy.ndarray[object[m,1]]: ...
    def __copy__(self) -> BasicVector_[Expression]: ...
    def __deepcopy__(self, arg0: dict) -> BasicVector_[Expression]: ...

class _TemporaryName_N5drake7systems11BasicVectorIdEE(VectorBase_[float]):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, data: numpy.ndarray[numpy.float64[m,1]]) -> None: ...
    @overload
    def __init__(self, size: int) -> None: ...
    def Clone(self) -> BasicVector_[float]: ...
    def _get_value_copy(self) -> numpy.ndarray[numpy.float64[m,1]]: ...
    def get_mutable_value(self) -> numpy.ndarray[numpy.float64[m,1],flags.writeable]: ...
    def get_value(self) -> numpy.ndarray[numpy.float64[m,1]]: ...
    def set_value(self, arg0: numpy.ndarray[numpy.float64[m,1]]) -> None: ...
    def value(self) -> numpy.ndarray[numpy.float64[m,1]]: ...
    def __copy__(self) -> BasicVector_[float]: ...
    def __deepcopy__(self, arg0: dict) -> BasicVector_[float]: ...

class _TemporaryName_N5drake7systems11LeafContextIN5Eigen14AutoDiffScalarINS2_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEEEEE(Context_[AutoDiffXd]):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class _TemporaryName_N5drake7systems11LeafContextINS_8symbolic10ExpressionEEE(Context_[Expression]):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class _TemporaryName_N5drake7systems11LeafContextIdEE(Context_[float]):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class _TemporaryName_N5drake7systems11SupervectorIN5Eigen14AutoDiffScalarINS2_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEEEEE(VectorBase_[AutoDiffXd]):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class _TemporaryName_N5drake7systems11SupervectorINS_8symbolic10ExpressionEEE(VectorBase_[Expression]):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class _TemporaryName_N5drake7systems11SupervectorIdEE(VectorBase_[float]):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class _TemporaryName_N5drake7systems12PublishEventIN5Eigen14AutoDiffScalarINS2_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEEEEE(Event_[AutoDiffXd]):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, callback: Callable[[Context_[AutoDiffXd],PublishEvent_[AutoDiffXd]],None]) -> None: ...
    @overload
    def __init__(self, system_callback) -> None: ...
    @overload
    def __init__(self, trigger_type: TriggerType, callback: Callable[[Context_[AutoDiffXd],PublishEvent_[AutoDiffXd]],None]) -> None: ...
    @overload
    def __init__(self, trigger_type: TriggerType, system_callback) -> None: ...

class _TemporaryName_N5drake7systems12PublishEventINS_8symbolic10ExpressionEEE(Event_[Expression]):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, callback: Callable[[Context_[Expression],PublishEvent_[Expression]],None]) -> None: ...
    @overload
    def __init__(self, system_callback) -> None: ...
    @overload
    def __init__(self, trigger_type: TriggerType, callback: Callable[[Context_[Expression],PublishEvent_[Expression]],None]) -> None: ...
    @overload
    def __init__(self, trigger_type: TriggerType, system_callback) -> None: ...

class _TemporaryName_N5drake7systems12PublishEventIdEE(Event_[float]):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, callback: Callable[[Context_[float],PublishEvent_[float]],None]) -> None: ...
    @overload
    def __init__(self, system_callback) -> None: ...
    @overload
    def __init__(self, trigger_type: TriggerType, callback: Callable[[Context_[float],PublishEvent_[float]],None]) -> None: ...
    @overload
    def __init__(self, trigger_type: TriggerType, system_callback) -> None: ...

class _TemporaryName_N5drake7systems12SystemOutputIN5Eigen14AutoDiffScalarINS2_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEEEEE:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def get_data(self, arg0: int) -> pydrake.common.value.AbstractValue: ...
    def get_vector_data(self, arg0: int) -> BasicVector_[AutoDiffXd]: ...
    def num_ports(self) -> int: ...

class _TemporaryName_N5drake7systems12SystemOutputINS_8symbolic10ExpressionEEE:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def get_data(self, arg0: int) -> pydrake.common.value.AbstractValue: ...
    def get_vector_data(self, arg0: int) -> BasicVector_[Expression]: ...
    def num_ports(self) -> int: ...

class _TemporaryName_N5drake7systems12SystemOutputIdEE:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def get_data(self, arg0: int) -> pydrake.common.value.AbstractValue: ...
    def get_vector_data(self, arg0: int) -> BasicVector_[float]: ...
    def num_ports(self) -> int: ...

class _TemporaryName_N5drake7systems12VectorSystemIN5Eigen14AutoDiffScalarINS2_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEEEEE(LeafSystem_[AutoDiffXd]):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, input_size: int, output_size: int, direct_feedthrough: Optional[bool] = ...) -> None: ...

class _TemporaryName_N5drake7systems12VectorSystemINS_8symbolic10ExpressionEEE(LeafSystem_[Expression]):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, input_size: int, output_size: int, direct_feedthrough: Optional[bool] = ...) -> None: ...

class _TemporaryName_N5drake7systems12VectorSystemIdEE(LeafSystem_[float]):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, input_size: int, output_size: int, direct_feedthrough: Optional[bool] = ...) -> None: ...

class _TemporaryName_N5drake7systems13SystemVisitorIN5Eigen14AutoDiffScalarINS2_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEEEEE:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self) -> None: ...
    def VisitDiagram(self, diagram: Diagram_[AutoDiffXd]) -> None: ...
    def VisitSystem(self, system: System_[AutoDiffXd]) -> None: ...

class _TemporaryName_N5drake7systems13SystemVisitorINS_8symbolic10ExpressionEEE:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self) -> None: ...
    def VisitDiagram(self, diagram: Diagram_[Expression]) -> None: ...
    def VisitSystem(self, system: System_[Expression]) -> None: ...

class _TemporaryName_N5drake7systems13SystemVisitorIdEE:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self) -> None: ...
    def VisitDiagram(self, diagram: Diagram_[float]) -> None: ...
    def VisitSystem(self, system: System_[float]) -> None: ...

class _TemporaryName_N5drake7systems14DiagramBuilderIN5Eigen14AutoDiffScalarINS2_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEEEEE:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self) -> None: ...
    def AddNamedSystem(self, *args, **kwargs) -> Any: ...
    def AddSystem(self, std) -> Any: ...
    def Build(self, *args, **kwargs) -> Any: ...
    def BuildInto(self, *args, **kwargs) -> Any: ...
    def Connect(self, *args, **kwargs) -> Any: ...
    def ConnectInput(self, *args, **kwargs) -> Any: ...
    def ConnectToSame(self, *args, **kwargs) -> Any: ...
    def ExportInput(self, *args, **kwargs) -> Any: ...
    def ExportOutput(self, *args, **kwargs) -> Any: ...
    def GetMutableSubsystemByName(self, *args, **kwargs) -> Any: ...
    def GetMutableSystems(self) -> list: ...
    def GetSubsystemByName(self, *args, **kwargs) -> Any: ...
    def GetSystems(self) -> list: ...
    def connection_map(self) -> dict: ...
    def empty(self) -> bool: ...

class _TemporaryName_N5drake7systems14DiagramBuilderINS_8symbolic10ExpressionEEE:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self) -> None: ...
    def AddNamedSystem(self, *args, **kwargs) -> Any: ...
    def AddSystem(self, std) -> Any: ...
    def Build(self, *args, **kwargs) -> Any: ...
    def BuildInto(self, target) -> None: ...
    def Connect(self, arg0, arg1) -> None: ...
    @overload
    def ConnectInput(self, diagram_port_name: str, input) -> None: ...
    @overload
    def ConnectInput(self, diagram_port_index: InputPortIndex, input) -> None: ...
    def ConnectToSame(self, exemplar, dest) -> bool: ...
    def ExportInput(self, input, name: Union[str,UseDefaultName] = ...) -> InputPortIndex: ...
    def ExportOutput(self, output, name: Union[str,UseDefaultName] = ...) -> OutputPortIndex: ...
    def GetMutableSubsystemByName(self, *args, **kwargs) -> Any: ...
    def GetMutableSystems(self) -> list: ...
    def GetSubsystemByName(self, *args, **kwargs) -> Any: ...
    def GetSystems(self) -> list: ...
    def connection_map(self) -> dict: ...
    def empty(self) -> bool: ...

class _TemporaryName_N5drake7systems14DiagramBuilderIdEE:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self) -> None: ...
    def AddNamedSystem(self, *args, **kwargs) -> Any: ...
    def AddSystem(self, std) -> Any: ...
    def Build(self, *args, **kwargs) -> Any: ...
    def BuildInto(self, target) -> None: ...
    def Connect(self, arg0, arg1) -> None: ...
    @overload
    def ConnectInput(self, diagram_port_name: str, input) -> None: ...
    @overload
    def ConnectInput(self, diagram_port_index: InputPortIndex, input) -> None: ...
    def ConnectToSame(self, exemplar, dest) -> bool: ...
    def ExportInput(self, input, name: Union[str,UseDefaultName] = ...) -> InputPortIndex: ...
    def ExportOutput(self, output, name: Union[str,UseDefaultName] = ...) -> OutputPortIndex: ...
    def GetMutableSubsystemByName(self, *args, **kwargs) -> Any: ...
    def GetMutableSystems(self) -> list: ...
    def GetSubsystemByName(self, *args, **kwargs) -> Any: ...
    def GetSystems(self) -> list: ...
    def connection_map(self) -> dict: ...
    def empty(self) -> bool: ...

class _TemporaryName_N5drake7systems14DiscreteValuesIN5Eigen14AutoDiffScalarINS2_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEEEEE:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, datum: BasicVector_[AutoDiffXd]) -> None: ...
    @overload
    def __init__(self, data: List[BasicVector_[AutoDiffXd]]) -> None: ...
    @overload
    def __init__(self) -> None: ...
    def Clone(self) -> DiscreteValues_[AutoDiffXd]: ...
    def SetFrom(self, arg0: DiscreteValues_[float]) -> None: ...
    def get_data(self) -> List[BasicVector_[AutoDiffXd]]: ...
    def get_mutable_value(self, index: int = ...) -> numpy.ndarray[object[m,1]]: ...
    def get_mutable_vector(self, index: int = ...) -> BasicVector_[AutoDiffXd]: ...
    def get_value(self, index: int = ...) -> numpy.ndarray[object[m,1]]: ...
    def get_vector(self, index: int = ...) -> BasicVector_[AutoDiffXd]: ...
    def num_groups(self) -> int: ...
    @overload
    def set_value(self, value: numpy.ndarray[object[m,1]]) -> None: ...
    @overload
    def set_value(self, index: int, value: numpy.ndarray[object[m,1]]) -> None: ...
    def size(self) -> int: ...
    def value(self, index: int = ...) -> numpy.ndarray[object[m,1]]: ...
    def __copy__(self) -> DiscreteValues_[AutoDiffXd]: ...
    def __deepcopy__(self, arg0: dict) -> DiscreteValues_[AutoDiffXd]: ...
    def __getitem__(self, arg0: int) -> pydrake.autodiffutils.AutoDiffXd: ...
    def __setitem__(self, arg0: int, arg1: pydrake.autodiffutils.AutoDiffXd) -> None: ...

class _TemporaryName_N5drake7systems14DiscreteValuesINS_8symbolic10ExpressionEEE:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, datum: BasicVector_[Expression]) -> None: ...
    @overload
    def __init__(self, data: List[BasicVector_[Expression]]) -> None: ...
    @overload
    def __init__(self) -> None: ...
    def Clone(self) -> DiscreteValues_[Expression]: ...
    def SetFrom(self, arg0: DiscreteValues_[float]) -> None: ...
    def get_data(self) -> List[BasicVector_[Expression]]: ...
    def get_mutable_value(self, index: int = ...) -> numpy.ndarray[object[m,1]]: ...
    def get_mutable_vector(self, index: int = ...) -> BasicVector_[Expression]: ...
    def get_value(self, index: int = ...) -> numpy.ndarray[object[m,1]]: ...
    def get_vector(self, index: int = ...) -> BasicVector_[Expression]: ...
    def num_groups(self) -> int: ...
    @overload
    def set_value(self, value: numpy.ndarray[object[m,1]]) -> None: ...
    @overload
    def set_value(self, index: int, value: numpy.ndarray[object[m,1]]) -> None: ...
    def size(self) -> int: ...
    def value(self, index: int = ...) -> numpy.ndarray[object[m,1]]: ...
    def __copy__(self) -> DiscreteValues_[Expression]: ...
    def __deepcopy__(self, arg0: dict) -> DiscreteValues_[Expression]: ...
    def __getitem__(self, arg0: int) -> pydrake.symbolic.Expression: ...
    def __setitem__(self, arg0: int, arg1: pydrake.symbolic.Expression) -> None: ...

class _TemporaryName_N5drake7systems14DiscreteValuesIdEE:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, datum: BasicVector_[float]) -> None: ...
    @overload
    def __init__(self, data: List[BasicVector_[float]]) -> None: ...
    @overload
    def __init__(self) -> None: ...
    def Clone(self) -> DiscreteValues_[float]: ...
    def SetFrom(self, arg0: DiscreteValues_[float]) -> None: ...
    def get_data(self) -> List[BasicVector_[float]]: ...
    def get_mutable_value(self, index: int = ...) -> numpy.ndarray[numpy.float64[m,1]]: ...
    def get_mutable_vector(self, index: int = ...) -> BasicVector_[float]: ...
    def get_value(self, index: int = ...) -> numpy.ndarray[numpy.float64[m,1]]: ...
    def get_vector(self, index: int = ...) -> BasicVector_[float]: ...
    def num_groups(self) -> int: ...
    @overload
    def set_value(self, value: numpy.ndarray[numpy.float64[m,1]]) -> None: ...
    @overload
    def set_value(self, index: int, value: numpy.ndarray[numpy.float64[m,1]]) -> None: ...
    def size(self) -> int: ...
    def value(self, index: int = ...) -> numpy.ndarray[numpy.float64[m,1]]: ...
    def __copy__(self) -> DiscreteValues_[float]: ...
    def __deepcopy__(self, arg0: dict) -> DiscreteValues_[float]: ...
    def __getitem__(self, arg0: int) -> float: ...
    def __setitem__(self, arg0: int, arg1: float) -> None: ...

class _TemporaryName_N5drake7systems14LeafOutputPortIN5Eigen14AutoDiffScalarINS2_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEEEEE(OutputPort_[AutoDiffXd]):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @overload
    def disable_caching_by_default(self) -> None: ...
    @overload
    def disable_caching_by_default(self) -> Any: ...

class _TemporaryName_N5drake7systems14LeafOutputPortINS_8symbolic10ExpressionEEE(OutputPort_[Expression]):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @overload
    def disable_caching_by_default(self) -> None: ...
    @overload
    def disable_caching_by_default(self) -> Any: ...

class _TemporaryName_N5drake7systems14LeafOutputPortIdEE(OutputPort_[float]):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @overload
    def disable_caching_by_default(self) -> None: ...
    @overload
    def disable_caching_by_default(self) -> Any: ...

class _TemporaryName_N5drake7systems15ContinuousStateIN5Eigen14AutoDiffScalarINS2_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEEEEE:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, state: VectorBase_[AutoDiffXd]) -> None: ...
    @overload
    def __init__(self, state: VectorBase_[AutoDiffXd], num_q: int, num_v: int, num_z: int) -> None: ...
    @overload
    def __init__(self) -> None: ...
    def Clone(self) -> ContinuousState_[AutoDiffXd]: ...
    def CopyToVector(self) -> numpy.ndarray[object[m,1]]: ...
    def SetFrom(self, arg0: ContinuousState_[float]) -> None: ...
    def SetFromVector(self, value: numpy.ndarray[object[m,1]]) -> None: ...
    def get_generalized_position(self) -> VectorBase_[AutoDiffXd]: ...
    def get_generalized_velocity(self) -> VectorBase_[AutoDiffXd]: ...
    def get_misc_continuous_state(self) -> VectorBase_[AutoDiffXd]: ...
    def get_mutable_generalized_position(self) -> VectorBase_[AutoDiffXd]: ...
    def get_mutable_generalized_velocity(self) -> VectorBase_[AutoDiffXd]: ...
    def get_mutable_misc_continuous_state(self) -> VectorBase_[AutoDiffXd]: ...
    def get_mutable_vector(self) -> VectorBase_[AutoDiffXd]: ...
    def get_vector(self) -> VectorBase_[AutoDiffXd]: ...
    def num_q(self) -> int: ...
    def num_v(self) -> int: ...
    def num_z(self) -> int: ...
    def size(self) -> int: ...
    def __copy__(self) -> ContinuousState_[AutoDiffXd]: ...
    def __deepcopy__(self, arg0: dict) -> ContinuousState_[AutoDiffXd]: ...
    def __getitem__(self, arg0: int) -> pydrake.autodiffutils.AutoDiffXd: ...
    def __setitem__(self, arg0: int, arg1: pydrake.autodiffutils.AutoDiffXd) -> None: ...

class _TemporaryName_N5drake7systems15ContinuousStateINS_8symbolic10ExpressionEEE:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, state: VectorBase_[Expression]) -> None: ...
    @overload
    def __init__(self, state: VectorBase_[Expression], num_q: int, num_v: int, num_z: int) -> None: ...
    @overload
    def __init__(self) -> None: ...
    def Clone(self) -> ContinuousState_[Expression]: ...
    def CopyToVector(self) -> numpy.ndarray[object[m,1]]: ...
    def SetFrom(self, arg0: ContinuousState_[float]) -> None: ...
    def SetFromVector(self, value: numpy.ndarray[object[m,1]]) -> None: ...
    def get_generalized_position(self) -> VectorBase_[Expression]: ...
    def get_generalized_velocity(self) -> VectorBase_[Expression]: ...
    def get_misc_continuous_state(self) -> VectorBase_[Expression]: ...
    def get_mutable_generalized_position(self) -> VectorBase_[Expression]: ...
    def get_mutable_generalized_velocity(self) -> VectorBase_[Expression]: ...
    def get_mutable_misc_continuous_state(self) -> VectorBase_[Expression]: ...
    def get_mutable_vector(self) -> VectorBase_[Expression]: ...
    def get_vector(self) -> VectorBase_[Expression]: ...
    def num_q(self) -> int: ...
    def num_v(self) -> int: ...
    def num_z(self) -> int: ...
    def size(self) -> int: ...
    def __copy__(self) -> ContinuousState_[Expression]: ...
    def __deepcopy__(self, arg0: dict) -> ContinuousState_[Expression]: ...
    def __getitem__(self, arg0: int) -> pydrake.symbolic.Expression: ...
    def __setitem__(self, arg0: int, arg1: pydrake.symbolic.Expression) -> None: ...

class _TemporaryName_N5drake7systems15ContinuousStateIdEE:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, state: VectorBase_[float]) -> None: ...
    @overload
    def __init__(self, state: VectorBase_[float], num_q: int, num_v: int, num_z: int) -> None: ...
    @overload
    def __init__(self) -> None: ...
    def Clone(self) -> ContinuousState_[float]: ...
    def CopyToVector(self) -> numpy.ndarray[numpy.float64[m,1]]: ...
    def SetFrom(self, arg0: ContinuousState_[float]) -> None: ...
    def SetFromVector(self, value: numpy.ndarray[numpy.float64[m,1]]) -> None: ...
    def get_generalized_position(self) -> VectorBase_[float]: ...
    def get_generalized_velocity(self) -> VectorBase_[float]: ...
    def get_misc_continuous_state(self) -> VectorBase_[float]: ...
    def get_mutable_generalized_position(self) -> VectorBase_[float]: ...
    def get_mutable_generalized_velocity(self) -> VectorBase_[float]: ...
    def get_mutable_misc_continuous_state(self) -> VectorBase_[float]: ...
    def get_mutable_vector(self) -> VectorBase_[float]: ...
    def get_vector(self) -> VectorBase_[float]: ...
    def num_q(self) -> int: ...
    def num_v(self) -> int: ...
    def num_z(self) -> int: ...
    def size(self) -> int: ...
    def __copy__(self) -> ContinuousState_[float]: ...
    def __deepcopy__(self, arg0: dict) -> ContinuousState_[float]: ...
    def __getitem__(self, arg0: int) -> float: ...
    def __setitem__(self, arg0: int, arg1: float) -> None: ...

class _TemporaryName_N5drake7systems15WitnessFunctionIN5Eigen14AutoDiffScalarINS2_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEEEEE:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class _TemporaryName_N5drake7systems15WitnessFunctionINS_8symbolic10ExpressionEEE:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class _TemporaryName_N5drake7systems15WitnessFunctionIdEE:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class _TemporaryName_N5drake7systems19DiscreteUpdateEventIN5Eigen14AutoDiffScalarINS2_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEEEEE(Event_[AutoDiffXd]):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class _TemporaryName_N5drake7systems19DiscreteUpdateEventINS_8symbolic10ExpressionEEE(Event_[Expression]):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class _TemporaryName_N5drake7systems19DiscreteUpdateEventIdEE(Event_[float]):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class _TemporaryName_N5drake7systems23UnrestrictedUpdateEventIN5Eigen14AutoDiffScalarINS2_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEEEEE(Event_[AutoDiffXd]):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, callback) -> None: ...
    @overload
    def __init__(self, system_callback) -> None: ...

class _TemporaryName_N5drake7systems23UnrestrictedUpdateEventINS_8symbolic10ExpressionEEE(Event_[Expression]):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, callback) -> None: ...
    @overload
    def __init__(self, system_callback) -> None: ...

class _TemporaryName_N5drake7systems23UnrestrictedUpdateEventIdEE(Event_[float]):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    @overload
    def __init__(self, callback) -> None: ...
    @overload
    def __init__(self, system_callback) -> None: ...

class _TemporaryName_N5drake7systems5EventIN5Eigen14AutoDiffScalarINS2_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEEEEE:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def get_trigger_type(self) -> TriggerType: ...

class _TemporaryName_N5drake7systems5EventINS_8symbolic10ExpressionEEE:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def get_trigger_type(self) -> TriggerType: ...

class _TemporaryName_N5drake7systems5EventIdEE:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def get_trigger_type(self) -> TriggerType: ...

class _TemporaryName_N5drake7systems5StateIN5Eigen14AutoDiffScalarINS2_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEEEEE:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self) -> None: ...
    @overload
    def get_abstract_state(self) -> AbstractValues: ...
    @overload
    def get_abstract_state(self, index: int) -> pydrake.common.value.AbstractValue: ...
    def get_continuous_state(self, *args, **kwargs) -> Any: ...
    def get_discrete_state(self, *args, **kwargs) -> Any: ...
    @overload
    def get_mutable_abstract_state(self) -> AbstractValues: ...
    @overload
    def get_mutable_abstract_state(self, index: int) -> pydrake.common.value.AbstractValue: ...
    def get_mutable_continuous_state(self, *args, **kwargs) -> Any: ...
    def get_mutable_discrete_state(self, index: int) -> BasicVector_[AutoDiffXd]: ...

class _TemporaryName_N5drake7systems5StateINS_8symbolic10ExpressionEEE:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self) -> None: ...
    @overload
    def get_abstract_state(self) -> AbstractValues: ...
    @overload
    def get_abstract_state(self, index: int) -> pydrake.common.value.AbstractValue: ...
    def get_continuous_state(self, *args, **kwargs) -> Any: ...
    def get_discrete_state(self, *args, **kwargs) -> Any: ...
    @overload
    def get_mutable_abstract_state(self) -> AbstractValues: ...
    @overload
    def get_mutable_abstract_state(self, index: int) -> pydrake.common.value.AbstractValue: ...
    def get_mutable_continuous_state(self, *args, **kwargs) -> Any: ...
    def get_mutable_discrete_state(self, index: int) -> BasicVector_[Expression]: ...

class _TemporaryName_N5drake7systems5StateIdEE:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self) -> None: ...
    @overload
    def get_abstract_state(self) -> AbstractValues: ...
    @overload
    def get_abstract_state(self, index: int) -> pydrake.common.value.AbstractValue: ...
    def get_continuous_state(self, *args, **kwargs) -> Any: ...
    def get_discrete_state(self, *args, **kwargs) -> Any: ...
    @overload
    def get_mutable_abstract_state(self) -> AbstractValues: ...
    @overload
    def get_mutable_abstract_state(self, index: int) -> pydrake.common.value.AbstractValue: ...
    def get_mutable_continuous_state(self, *args, **kwargs) -> Any: ...
    def get_mutable_discrete_state(self, index: int) -> BasicVector_[float]: ...

class _TemporaryName_N5drake7systems6SystemIN5Eigen14AutoDiffScalarINS2_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEEEEE(SystemBase):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    ToScalarType: Any
    ToScalarTypeMaybe: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def Accept(self, *args, **kwargs) -> Any: ...
    def AllocateContext(self) -> Context_[AutoDiffXd]: ...
    def AllocateDiscreteVariables(self) -> DiscreteValues_[AutoDiffXd]: ...
    def AllocateImplicitTimeDerivativesResidual(self) -> numpy.ndarray[object[m,1]]: ...
    def AllocateInputAbstract(self, input_port: InputPort_[AutoDiffXd]) -> pydrake.common.value.AbstractValue: ...
    def AllocateInputVector(self, input_port: InputPort_[AutoDiffXd]) -> BasicVector_[AutoDiffXd]: ...
    def AllocateOutput(self) -> SystemOutput_[AutoDiffXd]: ...
    def AllocateTimeDerivatives(self) -> ContinuousState_[AutoDiffXd]: ...
    def CalcConservativePower(self, context: Context_[AutoDiffXd]) -> pydrake.autodiffutils.AutoDiffXd: ...
    def CalcDiscreteVariableUpdates(self, context: Context_[AutoDiffXd], discrete_state: DiscreteValues_[AutoDiffXd]) -> None: ...
    def CalcForcedDiscreteVariableUpdate(self, context: Context_[AutoDiffXd], discrete_state: DiscreteValues_[AutoDiffXd]) -> None: ...
    def CalcForcedUnrestrictedUpdate(self, context: Context_[AutoDiffXd], state: State_[AutoDiffXd]) -> None: ...
    @overload
    def CalcImplicitTimeDerivativesResidual(self, context: Context_[AutoDiffXd], proposed_derivatives: ContinuousState_[AutoDiffXd], residual: Optional[numpy.ndarray[object[m,1],flags.writeable]]) -> None: ...
    @overload
    def CalcImplicitTimeDerivativesResidual(self, context: Context_[AutoDiffXd], proposed_derivatives: ContinuousState_[AutoDiffXd]) -> numpy.ndarray[object[m,1]]: ...
    def CalcKineticEnergy(self, context: Context_[AutoDiffXd]) -> pydrake.autodiffutils.AutoDiffXd: ...
    def CalcNonConservativePower(self, context: Context_[AutoDiffXd]) -> pydrake.autodiffutils.AutoDiffXd: ...
    def CalcOutput(self, context: Context_[AutoDiffXd], outputs: SystemOutput_[AutoDiffXd]) -> None: ...
    def CalcPotentialEnergy(self, context: Context_[AutoDiffXd]) -> pydrake.autodiffutils.AutoDiffXd: ...
    def CalcTimeDerivatives(self, context: Context_[AutoDiffXd], derivatives: ContinuousState_[AutoDiffXd]) -> None: ...
    def CalcUnrestrictedUpdate(self, context: Context_[AutoDiffXd], state: State_[AutoDiffXd]) -> None: ...
    def CreateDefaultContext(self) -> Context_[AutoDiffXd]: ...
    def DeclareInputPort(self, name: Union[str,UseDefaultName], type: PortDataType, size: int, random_type: Optional[pydrake.common._module_py.RandomDistribution] = ...) -> InputPort_[AutoDiffXd]: ...
    def EvalAbstractInput(self, arg0: Context_[AutoDiffXd], arg1: int) -> pydrake.common.value.AbstractValue: ...
    def EvalKineticEnergy(self, context: Context_[AutoDiffXd]) -> pydrake.autodiffutils.AutoDiffXd: ...
    def EvalPotentialEnergy(self, context: Context_[AutoDiffXd]) -> pydrake.autodiffutils.AutoDiffXd: ...
    def EvalTimeDerivatives(self, arg0: Context_[AutoDiffXd]) -> ContinuousState_[AutoDiffXd]: ...
    @overload
    def EvalUniquePeriodicDiscreteUpdate(self, context: Context_[AutoDiffXd]) -> DiscreteValues_[AutoDiffXd]: ...
    @overload
    def EvalUniquePeriodicDiscreteUpdate(self, context) -> Any: ...
    @overload
    def EvalUniquePeriodicDiscreteUpdate(self) -> Any: ...
    def EvalVectorInput(self, arg0: Context_[AutoDiffXd], arg1: int) -> BasicVector_[AutoDiffXd]: ...
    def FixInputPortsFrom(self, other_system: System_[float], other_context: Context_[float], target_context: Context_[AutoDiffXd]) -> None: ...
    def ForcedPublish(self, context: Context_[AutoDiffXd]) -> None: ...
    def GetGraphvizString(self, max_depth: int = ...) -> object: ...
    def GetInputPort(self, port_name: str) -> InputPort_[AutoDiffXd]: ...
    def GetMutableSubsystemContext(self, arg0: System_[AutoDiffXd], arg1: Context_[AutoDiffXd]) -> Context_[AutoDiffXd]: ...
    @overload
    def GetMyContextFromRoot(self, arg0: Context_[AutoDiffXd]) -> Context_[AutoDiffXd]: ...
    @overload
    def GetMyContextFromRoot(self) -> Any: ...
    def GetMyMutableContextFromRoot(self, arg0: Context_[AutoDiffXd]) -> Context_[AutoDiffXd]: ...
    def GetOutputPort(self, port_name: str) -> OutputPort_[AutoDiffXd]: ...
    def GetSubsystemContext(self, arg0: System_[AutoDiffXd], arg1: Context_[AutoDiffXd]) -> Context_[AutoDiffXd]: ...
    def GetUniquePeriodicDiscreteUpdateAttribute(self) -> Optional[PeriodicEventData]: ...
    @overload
    def GetWitnessFunctions(self, context: Context_[AutoDiffXd]) -> List[WitnessFunction_[AutoDiffXd]]: ...
    @overload
    def GetWitnessFunctions(self, context) -> Any: ...
    def HasAnyDirectFeedthrough(self) -> bool: ...
    @overload
    def HasDirectFeedthrough(self, output_port: int) -> bool: ...
    @overload
    def HasDirectFeedthrough(self, input_port: int, output_port: int) -> bool: ...
    @overload
    def IsDifferenceEquationSystem(self) -> Tuple[bool,float]: ...
    @overload
    def IsDifferenceEquationSystem(self) -> Any: ...
    def Publish(self, arg0: Context_[AutoDiffXd]) -> None: ...
    def SetDefaultContext(self, arg0: Context_[AutoDiffXd]) -> None: ...
    def SetRandomContext(self, context: Context_[AutoDiffXd], generator: pydrake.common._module_py.RandomGenerator) -> None: ...
    def ToAutoDiffXd(self) -> System_[AutoDiffXd]: ...
    def ToAutoDiffXdMaybe(self) -> System_[AutoDiffXd]: ...
    def ToScalarTypeMaybe[AutoDiffXd](self, *args, **kwargs) -> Any: ...
    def ToScalarTypeMaybe[Expression](self, *args, **kwargs) -> Any: ...
    def ToScalarTypeMaybe[float](self, *args, **kwargs) -> Any: ...
    def ToScalarType[AutoDiffXd](self, *args, **kwargs) -> Any: ...
    def ToScalarType[Expression](self, *args, **kwargs) -> Any: ...
    def ToScalarType[float](self, *args, **kwargs) -> Any: ...
    def ToSymbolic(self, *args, **kwargs) -> Any: ...
    def ToSymbolicMaybe(self, *args, **kwargs) -> Any: ...
    @overload
    def get_input_port(self, port_index: int) -> InputPort_[AutoDiffXd]: ...
    @overload
    def get_input_port(self) -> InputPort_[AutoDiffXd]: ...
    @overload
    def get_output_port(self, port_index: int) -> OutputPort_[AutoDiffXd]: ...
    @overload
    def get_output_port(self) -> OutputPort_[AutoDiffXd]: ...

class _TemporaryName_N5drake7systems6SystemINS_8symbolic10ExpressionEEE(SystemBase):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    ToScalarType: Any
    ToScalarTypeMaybe: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def Accept(self, v) -> None: ...
    def AllocateContext(self) -> Context_[Expression]: ...
    def AllocateDiscreteVariables(self) -> DiscreteValues_[Expression]: ...
    def AllocateImplicitTimeDerivativesResidual(self) -> numpy.ndarray[object[m,1]]: ...
    def AllocateInputAbstract(self, input_port: InputPort_[Expression]) -> pydrake.common.value.AbstractValue: ...
    def AllocateInputVector(self, input_port: InputPort_[Expression]) -> BasicVector_[Expression]: ...
    def AllocateOutput(self) -> SystemOutput_[Expression]: ...
    def AllocateTimeDerivatives(self) -> ContinuousState_[Expression]: ...
    def CalcConservativePower(self, context: Context_[Expression]) -> pydrake.symbolic.Expression: ...
    def CalcDiscreteVariableUpdates(self, context: Context_[Expression], discrete_state: DiscreteValues_[Expression]) -> None: ...
    def CalcForcedDiscreteVariableUpdate(self, context: Context_[Expression], discrete_state: DiscreteValues_[Expression]) -> None: ...
    def CalcForcedUnrestrictedUpdate(self, context: Context_[Expression], state: State_[Expression]) -> None: ...
    @overload
    def CalcImplicitTimeDerivativesResidual(self, context: Context_[Expression], proposed_derivatives: ContinuousState_[Expression], residual: Optional[numpy.ndarray[object[m,1],flags.writeable]]) -> None: ...
    @overload
    def CalcImplicitTimeDerivativesResidual(self, context: Context_[Expression], proposed_derivatives: ContinuousState_[Expression]) -> numpy.ndarray[object[m,1]]: ...
    def CalcKineticEnergy(self, context: Context_[Expression]) -> pydrake.symbolic.Expression: ...
    def CalcNonConservativePower(self, context: Context_[Expression]) -> pydrake.symbolic.Expression: ...
    def CalcOutput(self, context: Context_[Expression], outputs: SystemOutput_[Expression]) -> None: ...
    def CalcPotentialEnergy(self, context: Context_[Expression]) -> pydrake.symbolic.Expression: ...
    def CalcTimeDerivatives(self, context: Context_[Expression], derivatives: ContinuousState_[Expression]) -> None: ...
    def CalcUnrestrictedUpdate(self, context: Context_[Expression], state: State_[Expression]) -> None: ...
    def CreateDefaultContext(self) -> Context_[Expression]: ...
    def DeclareInputPort(self, name: Union[str,UseDefaultName], type: PortDataType, size: int, random_type: Optional[pydrake.common._module_py.RandomDistribution] = ...) -> InputPort_[Expression]: ...
    def EvalAbstractInput(self, arg0: Context_[Expression], arg1: int) -> pydrake.common.value.AbstractValue: ...
    def EvalKineticEnergy(self, context: Context_[Expression]) -> pydrake.symbolic.Expression: ...
    def EvalPotentialEnergy(self, context: Context_[Expression]) -> pydrake.symbolic.Expression: ...
    def EvalTimeDerivatives(self, arg0: Context_[Expression]) -> ContinuousState_[Expression]: ...
    @overload
    def EvalUniquePeriodicDiscreteUpdate(self, context: Context_[Expression]) -> DiscreteValues_[Expression]: ...
    @overload
    def EvalUniquePeriodicDiscreteUpdate(self, context) -> Any: ...
    @overload
    def EvalUniquePeriodicDiscreteUpdate(self) -> Any: ...
    def EvalVectorInput(self, arg0: Context_[Expression], arg1: int) -> BasicVector_[Expression]: ...
    def FixInputPortsFrom(self, other_system: System_[float], other_context: Context_[float], target_context: Context_[Expression]) -> None: ...
    def ForcedPublish(self, context: Context_[Expression]) -> None: ...
    def GetGraphvizString(self, max_depth: int = ...) -> object: ...
    def GetInputPort(self, port_name: str) -> InputPort_[Expression]: ...
    def GetMutableSubsystemContext(self, arg0: System_[Expression], arg1: Context_[Expression]) -> Context_[Expression]: ...
    @overload
    def GetMyContextFromRoot(self, arg0: Context_[Expression]) -> Context_[Expression]: ...
    @overload
    def GetMyContextFromRoot(self) -> Any: ...
    def GetMyMutableContextFromRoot(self, arg0: Context_[Expression]) -> Context_[Expression]: ...
    def GetOutputPort(self, port_name: str) -> OutputPort_[Expression]: ...
    def GetSubsystemContext(self, arg0: System_[Expression], arg1: Context_[Expression]) -> Context_[Expression]: ...
    def GetUniquePeriodicDiscreteUpdateAttribute(self) -> Optional[PeriodicEventData]: ...
    @overload
    def GetWitnessFunctions(self, context: Context_[Expression]) -> List[WitnessFunction_[Expression]]: ...
    @overload
    def GetWitnessFunctions(self, context) -> Any: ...
    def HasAnyDirectFeedthrough(self) -> bool: ...
    @overload
    def HasDirectFeedthrough(self, output_port: int) -> bool: ...
    @overload
    def HasDirectFeedthrough(self, input_port: int, output_port: int) -> bool: ...
    @overload
    def IsDifferenceEquationSystem(self) -> Tuple[bool,float]: ...
    @overload
    def IsDifferenceEquationSystem(self) -> Any: ...
    def Publish(self, arg0: Context_[Expression]) -> None: ...
    def SetDefaultContext(self, arg0: Context_[Expression]) -> None: ...
    def SetRandomContext(self, context: Context_[Expression], generator: pydrake.common._module_py.RandomGenerator) -> None: ...
    def ToAutoDiffXd(self) -> System_[AutoDiffXd]: ...
    def ToAutoDiffXdMaybe(self) -> System_[AutoDiffXd]: ...
    def ToScalarTypeMaybe[AutoDiffXd](self, *args, **kwargs) -> Any: ...
    def ToScalarTypeMaybe[Expression](self, *args, **kwargs) -> Any: ...
    def ToScalarTypeMaybe[float](self, *args, **kwargs) -> Any: ...
    def ToScalarType[AutoDiffXd](self, *args, **kwargs) -> Any: ...
    def ToScalarType[Expression](self, *args, **kwargs) -> Any: ...
    def ToScalarType[float](self, *args, **kwargs) -> Any: ...
    def ToSymbolic(self) -> System_[Expression]: ...
    def ToSymbolicMaybe(self) -> System_[Expression]: ...
    @overload
    def get_input_port(self, port_index: int) -> InputPort_[Expression]: ...
    @overload
    def get_input_port(self) -> InputPort_[Expression]: ...
    @overload
    def get_output_port(self, port_index: int) -> OutputPort_[Expression]: ...
    @overload
    def get_output_port(self) -> OutputPort_[Expression]: ...

class _TemporaryName_N5drake7systems6SystemIdEE(SystemBase):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    ToScalarType: Any
    ToScalarTypeMaybe: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def Accept(self, v) -> None: ...
    def AllocateContext(self) -> Context_[float]: ...
    def AllocateDiscreteVariables(self) -> DiscreteValues_[float]: ...
    def AllocateImplicitTimeDerivativesResidual(self) -> numpy.ndarray[numpy.float64[m,1]]: ...
    def AllocateInputAbstract(self, input_port: InputPort_[float]) -> pydrake.common.value.AbstractValue: ...
    def AllocateInputVector(self, input_port: InputPort_[float]) -> BasicVector_[float]: ...
    def AllocateOutput(self) -> SystemOutput_[float]: ...
    def AllocateTimeDerivatives(self) -> ContinuousState_[float]: ...
    def CalcConservativePower(self, context: Context_[float]) -> float: ...
    def CalcDiscreteVariableUpdates(self, context: Context_[float], discrete_state: DiscreteValues_[float]) -> None: ...
    def CalcForcedDiscreteVariableUpdate(self, context: Context_[float], discrete_state: DiscreteValues_[float]) -> None: ...
    def CalcForcedUnrestrictedUpdate(self, context: Context_[float], state: State_[float]) -> None: ...
    @overload
    def CalcImplicitTimeDerivativesResidual(self, context: Context_[float], proposed_derivatives: ContinuousState_[float], residual: Optional[numpy.ndarray[numpy.float64[m,1],flags.writeable]]) -> None: ...
    @overload
    def CalcImplicitTimeDerivativesResidual(self, context: Context_[float], proposed_derivatives: ContinuousState_[float]) -> numpy.ndarray[numpy.float64[m,1]]: ...
    def CalcKineticEnergy(self, context: Context_[float]) -> float: ...
    def CalcNonConservativePower(self, context: Context_[float]) -> float: ...
    def CalcOutput(self, context: Context_[float], outputs: SystemOutput_[float]) -> None: ...
    def CalcPotentialEnergy(self, context: Context_[float]) -> float: ...
    def CalcTimeDerivatives(self, context: Context_[float], derivatives: ContinuousState_[float]) -> None: ...
    def CalcUnrestrictedUpdate(self, context: Context_[float], state: State_[float]) -> None: ...
    def CreateDefaultContext(self) -> Context_[float]: ...
    def DeclareInputPort(self, name: Union[str,UseDefaultName], type: PortDataType, size: int, random_type: Optional[pydrake.common._module_py.RandomDistribution] = ...) -> InputPort_[float]: ...
    def EvalAbstractInput(self, arg0: Context_[float], arg1: int) -> pydrake.common.value.AbstractValue: ...
    def EvalKineticEnergy(self, context: Context_[float]) -> float: ...
    def EvalPotentialEnergy(self, context: Context_[float]) -> float: ...
    def EvalTimeDerivatives(self, arg0: Context_[float]) -> ContinuousState_[float]: ...
    @overload
    def EvalUniquePeriodicDiscreteUpdate(self, context: Context_[float]) -> DiscreteValues_[float]: ...
    @overload
    def EvalUniquePeriodicDiscreteUpdate(self, context) -> Any: ...
    @overload
    def EvalUniquePeriodicDiscreteUpdate(self) -> Any: ...
    def EvalVectorInput(self, arg0: Context_[float], arg1: int) -> BasicVector_[float]: ...
    def FixInputPortsFrom(self, other_system: System_[float], other_context: Context_[float], target_context: Context_[float]) -> None: ...
    def ForcedPublish(self, context: Context_[float]) -> None: ...
    def GetGraphvizString(self, max_depth: int = ...) -> object: ...
    def GetInputPort(self, port_name: str) -> InputPort_[float]: ...
    def GetMutableSubsystemContext(self, arg0: System_[float], arg1: Context_[float]) -> Context_[float]: ...
    @overload
    def GetMyContextFromRoot(self, arg0: Context_[float]) -> Context_[float]: ...
    @overload
    def GetMyContextFromRoot(self) -> Any: ...
    def GetMyMutableContextFromRoot(self, arg0: Context_[float]) -> Context_[float]: ...
    def GetOutputPort(self, port_name: str) -> OutputPort_[float]: ...
    def GetSubsystemContext(self, arg0: System_[float], arg1: Context_[float]) -> Context_[float]: ...
    def GetUniquePeriodicDiscreteUpdateAttribute(self) -> Optional[PeriodicEventData]: ...
    @overload
    def GetWitnessFunctions(self, context: Context_[float]) -> List[WitnessFunction_[float]]: ...
    @overload
    def GetWitnessFunctions(self, context) -> Any: ...
    def HasAnyDirectFeedthrough(self) -> bool: ...
    @overload
    def HasDirectFeedthrough(self, output_port: int) -> bool: ...
    @overload
    def HasDirectFeedthrough(self, input_port: int, output_port: int) -> bool: ...
    @overload
    def IsDifferenceEquationSystem(self) -> Tuple[bool,float]: ...
    @overload
    def IsDifferenceEquationSystem(self) -> Any: ...
    def Publish(self, arg0: Context_[float]) -> None: ...
    def SetDefaultContext(self, arg0: Context_[float]) -> None: ...
    def SetRandomContext(self, context: Context_[float], generator: pydrake.common._module_py.RandomGenerator) -> None: ...
    def ToAutoDiffXd(self, *args, **kwargs) -> Any: ...
    def ToAutoDiffXdMaybe(self, *args, **kwargs) -> Any: ...
    def ToScalarTypeMaybe[AutoDiffXd](self, *args, **kwargs) -> Any: ...
    def ToScalarTypeMaybe[Expression](self, *args, **kwargs) -> Any: ...
    def ToScalarTypeMaybe[float](self, *args, **kwargs) -> Any: ...
    def ToScalarType[AutoDiffXd](self, *args, **kwargs) -> Any: ...
    def ToScalarType[Expression](self, *args, **kwargs) -> Any: ...
    def ToScalarType[float](self, *args, **kwargs) -> Any: ...
    def ToSymbolic(self, *args, **kwargs) -> Any: ...
    def ToSymbolicMaybe(self, *args, **kwargs) -> Any: ...
    @overload
    def get_input_port(self, port_index: int) -> InputPort_[float]: ...
    @overload
    def get_input_port(self) -> InputPort_[float]: ...
    @overload
    def get_output_port(self, port_index: int) -> OutputPort_[float]: ...
    @overload
    def get_output_port(self) -> OutputPort_[float]: ...

class _TemporaryName_N5drake7systems7ContextIN5Eigen14AutoDiffScalarINS2_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEEEEE(ContextBase):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def Clone(self) -> Context_[AutoDiffXd]: ...
    def SetAbstractState(self, index: int, value: object) -> None: ...
    def SetAccuracy(self, accuracy: Optional[float]) -> None: ...
    def SetContinuousState(self, arg0: numpy.ndarray[object[m,1]]) -> None: ...
    @overload
    def SetDiscreteState(self, xd: numpy.ndarray[object[m,1]]) -> None: ...
    @overload
    def SetDiscreteState(self, group_index: int, xd: numpy.ndarray[object[m,1]]) -> None: ...
    @overload
    def SetStateAndParametersFrom(self, source: Context_[float]) -> None: ...
    @overload
    def SetStateAndParametersFrom(self, source: Context_[AutoDiffXd]) -> None: ...
    @overload
    def SetStateAndParametersFrom(self, source) -> None: ...
    def SetTime(self, time_sec: pydrake.autodiffutils.AutoDiffXd) -> None: ...
    def SetTimeAndContinuousState(self, arg0: pydrake.autodiffutils.AutoDiffXd, arg1: numpy.ndarray[object[m,1]]) -> None: ...
    @overload
    def SetTimeStateAndParametersFrom(self, source: Context_[float]) -> None: ...
    @overload
    def SetTimeStateAndParametersFrom(self, source: Context_[AutoDiffXd]) -> None: ...
    @overload
    def SetTimeStateAndParametersFrom(self, source) -> None: ...
    def get_abstract_parameter(self, index: int) -> pydrake.common.value.AbstractValue: ...
    @overload
    def get_abstract_state(self) -> AbstractValues: ...
    @overload
    def get_abstract_state(self, index: int) -> pydrake.common.value.AbstractValue: ...
    def get_accuracy(self) -> Optional[float]: ...
    def get_continuous_state(self, *args, **kwargs) -> Any: ...
    def get_continuous_state_vector(self) -> VectorBase_[AutoDiffXd]: ...
    def get_discrete_state(self, arg0: int) -> BasicVector_[AutoDiffXd]: ...
    def get_discrete_state_vector(self) -> BasicVector_[AutoDiffXd]: ...
    def get_mutable_abstract_parameter(self, index: int) -> pydrake.common.value.AbstractValue: ...
    @overload
    def get_mutable_abstract_state(self) -> AbstractValues: ...
    @overload
    def get_mutable_abstract_state(self, index: int) -> pydrake.common.value.AbstractValue: ...
    def get_mutable_continuous_state(self, *args, **kwargs) -> Any: ...
    def get_mutable_continuous_state_vector(self) -> VectorBase_[AutoDiffXd]: ...
    def get_mutable_discrete_state(self, arg0: int) -> BasicVector_[AutoDiffXd]: ...
    def get_mutable_discrete_state_vector(self) -> BasicVector_[AutoDiffXd]: ...
    def get_mutable_numeric_parameter(self, index: int) -> BasicVector_[AutoDiffXd]: ...
    def get_mutable_parameters(self, *args, **kwargs) -> Any: ...
    def get_mutable_state(self, *args, **kwargs) -> Any: ...
    def get_numeric_parameter(self, index: int) -> BasicVector_[AutoDiffXd]: ...
    def get_parameters(self, *args, **kwargs) -> Any: ...
    def get_state(self, *args, **kwargs) -> Any: ...
    def get_time(self) -> pydrake.autodiffutils.AutoDiffXd: ...
    def has_only_continuous_state(self) -> bool: ...
    def has_only_discrete_state(self) -> bool: ...
    def is_stateless(self) -> bool: ...
    def num_abstract_parameters(self) -> int: ...
    def num_abstract_states(self) -> int: ...
    def num_continuous_states(self) -> int: ...
    def num_discrete_state_groups(self) -> int: ...
    def num_numeric_parameter_groups(self) -> int: ...
    def num_total_states(self) -> int: ...
    def __copy__(self) -> Context_[AutoDiffXd]: ...
    def __deepcopy__(self, arg0: dict) -> Context_[AutoDiffXd]: ...

class _TemporaryName_N5drake7systems7ContextINS_8symbolic10ExpressionEEE(ContextBase):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def Clone(self) -> Context_[Expression]: ...
    def SetAbstractState(self, index: int, value: object) -> None: ...
    def SetAccuracy(self, accuracy: Optional[float]) -> None: ...
    def SetContinuousState(self, arg0: numpy.ndarray[object[m,1]]) -> None: ...
    @overload
    def SetDiscreteState(self, xd: numpy.ndarray[object[m,1]]) -> None: ...
    @overload
    def SetDiscreteState(self, group_index: int, xd: numpy.ndarray[object[m,1]]) -> None: ...
    @overload
    def SetDiscreteState(self, xd) -> None: ...
    @overload
    def SetStateAndParametersFrom(self, source: Context_[float]) -> None: ...
    @overload
    def SetStateAndParametersFrom(self, source: Context_[AutoDiffXd]) -> None: ...
    @overload
    def SetStateAndParametersFrom(self, source: Context_[Expression]) -> None: ...
    def SetTime(self, time_sec: pydrake.symbolic.Expression) -> None: ...
    def SetTimeAndContinuousState(self, arg0: pydrake.symbolic.Expression, arg1: numpy.ndarray[object[m,1]]) -> None: ...
    @overload
    def SetTimeStateAndParametersFrom(self, source: Context_[float]) -> None: ...
    @overload
    def SetTimeStateAndParametersFrom(self, source: Context_[AutoDiffXd]) -> None: ...
    @overload
    def SetTimeStateAndParametersFrom(self, source: Context_[Expression]) -> None: ...
    def get_abstract_parameter(self, index: int) -> pydrake.common.value.AbstractValue: ...
    @overload
    def get_abstract_state(self) -> AbstractValues: ...
    @overload
    def get_abstract_state(self, index: int) -> pydrake.common.value.AbstractValue: ...
    def get_accuracy(self) -> Optional[float]: ...
    def get_continuous_state(self, *args, **kwargs) -> Any: ...
    def get_continuous_state_vector(self) -> VectorBase_[Expression]: ...
    def get_discrete_state(self, arg0: int) -> BasicVector_[Expression]: ...
    def get_discrete_state_vector(self) -> BasicVector_[Expression]: ...
    def get_mutable_abstract_parameter(self, index: int) -> pydrake.common.value.AbstractValue: ...
    @overload
    def get_mutable_abstract_state(self) -> AbstractValues: ...
    @overload
    def get_mutable_abstract_state(self, index: int) -> pydrake.common.value.AbstractValue: ...
    def get_mutable_continuous_state(self, *args, **kwargs) -> Any: ...
    def get_mutable_continuous_state_vector(self) -> VectorBase_[Expression]: ...
    def get_mutable_discrete_state(self, arg0: int) -> BasicVector_[Expression]: ...
    def get_mutable_discrete_state_vector(self) -> BasicVector_[Expression]: ...
    def get_mutable_numeric_parameter(self, index: int) -> BasicVector_[Expression]: ...
    def get_mutable_parameters(self, *args, **kwargs) -> Any: ...
    def get_mutable_state(self, *args, **kwargs) -> Any: ...
    def get_numeric_parameter(self, index: int) -> BasicVector_[Expression]: ...
    def get_parameters(self, *args, **kwargs) -> Any: ...
    def get_state(self, *args, **kwargs) -> Any: ...
    def get_time(self) -> pydrake.symbolic.Expression: ...
    def has_only_continuous_state(self) -> bool: ...
    def has_only_discrete_state(self) -> bool: ...
    def is_stateless(self) -> bool: ...
    def num_abstract_parameters(self) -> int: ...
    def num_abstract_states(self) -> int: ...
    def num_continuous_states(self) -> int: ...
    def num_discrete_state_groups(self) -> int: ...
    def num_numeric_parameter_groups(self) -> int: ...
    def num_total_states(self) -> int: ...
    def __copy__(self) -> Context_[Expression]: ...
    def __deepcopy__(self, arg0: dict) -> Context_[Expression]: ...

class _TemporaryName_N5drake7systems7ContextIdEE(ContextBase):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def Clone(self) -> Context_[float]: ...
    def SetAbstractState(self, index: int, value: object) -> None: ...
    def SetAccuracy(self, accuracy: Optional[float]) -> None: ...
    def SetContinuousState(self, arg0: numpy.ndarray[numpy.float64[m,1]]) -> None: ...
    @overload
    def SetDiscreteState(self, xd: numpy.ndarray[numpy.float64[m,1]]) -> None: ...
    @overload
    def SetDiscreteState(self, group_index: int, xd: numpy.ndarray[numpy.float64[m,1]]) -> None: ...
    @overload
    def SetDiscreteState(self, xd) -> None: ...
    @overload
    def SetStateAndParametersFrom(self, source: Context_[float]) -> None: ...
    @overload
    def SetStateAndParametersFrom(self, source) -> None: ...
    def SetTime(self, time_sec: float) -> None: ...
    def SetTimeAndContinuousState(self, arg0: float, arg1: numpy.ndarray[numpy.float64[m,1]]) -> None: ...
    @overload
    def SetTimeStateAndParametersFrom(self, source: Context_[float]) -> None: ...
    @overload
    def SetTimeStateAndParametersFrom(self, source) -> None: ...
    def get_abstract_parameter(self, index: int) -> pydrake.common.value.AbstractValue: ...
    @overload
    def get_abstract_state(self) -> AbstractValues: ...
    @overload
    def get_abstract_state(self, index: int) -> pydrake.common.value.AbstractValue: ...
    def get_accuracy(self) -> Optional[float]: ...
    def get_continuous_state(self, *args, **kwargs) -> Any: ...
    def get_continuous_state_vector(self) -> VectorBase_[float]: ...
    def get_discrete_state(self, arg0: int) -> BasicVector_[float]: ...
    def get_discrete_state_vector(self) -> BasicVector_[float]: ...
    def get_mutable_abstract_parameter(self, index: int) -> pydrake.common.value.AbstractValue: ...
    @overload
    def get_mutable_abstract_state(self) -> AbstractValues: ...
    @overload
    def get_mutable_abstract_state(self, index: int) -> pydrake.common.value.AbstractValue: ...
    def get_mutable_continuous_state(self, *args, **kwargs) -> Any: ...
    def get_mutable_continuous_state_vector(self) -> VectorBase_[float]: ...
    def get_mutable_discrete_state(self, arg0: int) -> BasicVector_[float]: ...
    def get_mutable_discrete_state_vector(self) -> BasicVector_[float]: ...
    def get_mutable_numeric_parameter(self, index: int) -> BasicVector_[float]: ...
    def get_mutable_parameters(self, *args, **kwargs) -> Any: ...
    def get_mutable_state(self, *args, **kwargs) -> Any: ...
    def get_numeric_parameter(self, index: int) -> BasicVector_[float]: ...
    def get_parameters(self, *args, **kwargs) -> Any: ...
    def get_state(self, *args, **kwargs) -> Any: ...
    def get_time(self) -> float: ...
    def has_only_continuous_state(self) -> bool: ...
    def has_only_discrete_state(self) -> bool: ...
    def is_stateless(self) -> bool: ...
    def num_abstract_parameters(self) -> int: ...
    def num_abstract_states(self) -> int: ...
    def num_continuous_states(self) -> int: ...
    def num_discrete_state_groups(self) -> int: ...
    def num_numeric_parameter_groups(self) -> int: ...
    def num_total_states(self) -> int: ...
    def __copy__(self) -> Context_[float]: ...
    def __deepcopy__(self, arg0: dict) -> Context_[float]: ...

class _TemporaryName_N5drake7systems7DiagramIN5Eigen14AutoDiffScalarINS2_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEEEEE(System_[AutoDiffXd]):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self) -> None: ...
    def GetInputPortLocators(self, port_index: InputPortIndex) -> list: ...
    def GetMutableSubsystemState(self, arg0: System_[AutoDiffXd], arg1: Context_[AutoDiffXd]) -> State_[AutoDiffXd]: ...
    def GetSubsystemByName(self, name: str) -> System_[AutoDiffXd]: ...
    def GetSystems(self) -> list: ...
    def connection_map(self) -> dict: ...
    def get_output_port_locator(self, port_index: OutputPortIndex) -> tuple: ...

class _TemporaryName_N5drake7systems7DiagramINS_8symbolic10ExpressionEEE(System_[Expression]):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self) -> None: ...
    def GetInputPortLocators(self, port_index: InputPortIndex) -> list: ...
    def GetMutableSubsystemState(self, arg0: System_[Expression], arg1: Context_[Expression]) -> State_[Expression]: ...
    def GetSubsystemByName(self, name: str) -> System_[Expression]: ...
    def GetSystems(self) -> list: ...
    def connection_map(self) -> dict: ...
    def get_output_port_locator(self, port_index: OutputPortIndex) -> tuple: ...

class _TemporaryName_N5drake7systems7DiagramIdEE(System_[float]):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self) -> None: ...
    def GetInputPortLocators(self, port_index: InputPortIndex) -> list: ...
    def GetMutableSubsystemState(self, arg0: System_[float], arg1: Context_[float]) -> State_[float]: ...
    def GetSubsystemByName(self, name: str) -> System_[float]: ...
    def GetSystems(self) -> list: ...
    def connection_map(self) -> dict: ...
    def get_output_port_locator(self, port_index: OutputPortIndex) -> tuple: ...

class _TemporaryName_N5drake7systems9InputPortIN5Eigen14AutoDiffScalarINS2_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEEEEE:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def Allocate(self) -> pydrake.common.value.AbstractValue: ...
    def Eval(self, arg0: Context_[AutoDiffXd]) -> object: ...
    def EvalAbstract(self, context: Context_[AutoDiffXd]) -> pydrake.common.value.AbstractValue: ...
    def EvalBasicVector(self, context: Context_[AutoDiffXd]) -> object: ...
    @overload
    def FixValue(self, context: Context_[AutoDiffXd], value: pydrake.common.value.AbstractValue) -> FixedInputPortValue: ...
    @overload
    def FixValue(self, context: Context_[AutoDiffXd], value: object) -> FixedInputPortValue: ...
    def GetFullDescription(self) -> str: ...
    def HasValue(self, context: Context_[AutoDiffXd]) -> bool: ...
    def get_data_type(self) -> PortDataType: ...
    def get_index(self) -> InputPortIndex: ...
    def get_name(self) -> str: ...
    def get_system(self, *args, **kwargs) -> Any: ...
    def size(self) -> int: ...
    def ticket(self) -> DependencyTicket: ...

class _TemporaryName_N5drake7systems9InputPortINS_8symbolic10ExpressionEEE:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def Allocate(self) -> pydrake.common.value.AbstractValue: ...
    def Eval(self, arg0: Context_[Expression]) -> object: ...
    def EvalAbstract(self, context: Context_[Expression]) -> pydrake.common.value.AbstractValue: ...
    def EvalBasicVector(self, context: Context_[Expression]) -> object: ...
    @overload
    def FixValue(self, context: Context_[Expression], value: pydrake.common.value.AbstractValue) -> FixedInputPortValue: ...
    @overload
    def FixValue(self, context: Context_[Expression], value: object) -> FixedInputPortValue: ...
    def GetFullDescription(self) -> str: ...
    def HasValue(self, context: Context_[Expression]) -> bool: ...
    def get_data_type(self) -> PortDataType: ...
    def get_index(self) -> InputPortIndex: ...
    def get_name(self) -> str: ...
    def get_system(self, *args, **kwargs) -> Any: ...
    def size(self) -> int: ...
    def ticket(self) -> DependencyTicket: ...

class _TemporaryName_N5drake7systems9InputPortIdEE:
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def Allocate(self) -> pydrake.common.value.AbstractValue: ...
    def Eval(self, arg0: Context_[float]) -> object: ...
    def EvalAbstract(self, context: Context_[float]) -> pydrake.common.value.AbstractValue: ...
    def EvalBasicVector(self, context: Context_[float]) -> object: ...
    @overload
    def FixValue(self, context: Context_[float], value: pydrake.common.value.AbstractValue) -> FixedInputPortValue: ...
    @overload
    def FixValue(self, context: Context_[float], value: object) -> FixedInputPortValue: ...
    def GetFullDescription(self) -> str: ...
    def HasValue(self, context: Context_[float]) -> bool: ...
    def get_data_type(self) -> PortDataType: ...
    def get_index(self) -> InputPortIndex: ...
    def get_name(self) -> str: ...
    def get_system(self, *args, **kwargs) -> Any: ...
    def size(self) -> int: ...
    def ticket(self) -> DependencyTicket: ...

class _TemporaryName_N5drake7systems9SubvectorIN5Eigen14AutoDiffScalarINS2_6MatrixIdLin1ELi1ELi0ELin1ELi1EEEEEEE(VectorBase_[AutoDiffXd]):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class _TemporaryName_N5drake7systems9SubvectorINS_8symbolic10ExpressionEEE(VectorBase_[Expression]):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class _TemporaryName_N5drake7systems9SubvectorIdEE(VectorBase_[float]):
    _original_name: ClassVar[str] = ...
    _original_qualname: ClassVar[str] = ...
    def __init__(self, *args, **kwargs) -> None: ...

def GenerateHtml(system, initial_depth: int = ...) -> str: ...
